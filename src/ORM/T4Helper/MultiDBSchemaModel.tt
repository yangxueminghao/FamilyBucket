<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#@ include file="./IncludeFiles/DBSchema.ttinclude"#>
<#@ include file="./IncludeFiles/MultiDocument.ttinclude"#>
<#
	var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)};

	var dbSchema = DBSchemaFactory.GetDBSchema();
	Dictionary<string,string> tableList = dbSchema.GetTableList();

	//项目名称
	string projectName = "PlatFormService";

	//模块名称
	string moduleName = "Database";

	//模块描述
	//string moduleDesc = "数据库实体类";

	//实体前缀
	string modelPre = DBSchemaFactory.TablePrefix;
	
	foreach(string tableRealName in tableList.Keys)
    {	
		if(GeneratorHelper.IsNeedDealTable(tableRealName))
        {
			Table table = dbSchema.GetTableMetaData(tableRealName);

			string tableDesc = tableList[tableRealName];
			string tableName = tableRealName;


			var tupleItem = GeneratorHelper.ConvertTableNameDesc(tableName,tableDesc);
			tableName = tupleItem.Item1;
			tableDesc = tupleItem.Item2;

			//生成实体层
			manager.StartBlock(modelPre+tableName+".cs");

			string columnsString = "";
			string columnDbTableString = "";	//insert 表字段字符串
			string columnParamString = "";		//insert 参数字符串
			string columnSetParamStr = ""; //update 参数字符串(不包含主键,主键在where子句中)
			string tablePrimaryKey ="";
#>

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace <#=projectName#>.Model.<#=moduleName#>
{
	/// <summary>
	/// <#=tableDesc#>
	/// </summary>
	public class <#=modelPre#><#=tableName#>
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public <#=modelPre#><#=tableName#>()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

<#
		foreach(Column c in table.Columns)
		{
			if(c.Key=="PRI"){
				tablePrimaryKey = c.Field;
            }

			if(!GeneratorHelper.IsNeedFilter(c.Field)){
				columnsString = columnsString + c.Field + ",";

				if(c.Key!="PRI"&&!c.Field.ToLower().Equals("updatetime")&&!c.Field.ToLower().Equals("createtime")){
					columnDbTableString = columnDbTableString+c.Field + ",";
					columnParamString = columnParamString+"@"+c.Field + ",";
				}
				
				if(c.Key!="PRI"&&!c.Field.ToLower().Equals("updatetime")&&!c.Field.ToLower().Equals("createtime")&&!c.Field.ToLower().Equals("createid"))
					columnSetParamStr = columnSetParamStr+ c.Field + "=@"+ c.Field+",";

				string cSharpType = GeneratorHelper.GetQuesMarkByType(c.TypeName);	
#>
		/// <summary>
		/// <#=c.Comment#>
		/// </summary>
		public <#=cSharpType#><# if(GeneratorHelper.IsNeedSetNULL(c.IsNull,cSharpType)){ #>?<# }#> <#=c.Field#> { get; set; }

<#
			}
		}
#>

		#endregion
	}
}
<#
			manager.EndBlock();

			manager.StartBlock("DAL_"+tableName+".cs");

			columnsString = columnsString.TrimEnd(',');
			columnDbTableString = columnDbTableString.TrimEnd(',');
			columnParamString = columnParamString.TrimEnd(',');
			columnSetParamStr = columnSetParamStr.TrimEnd(',');

#>

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
// </auto-generated>
//------------------------------------------------------------------------------

using <#=projectName#>.Model.<#=moduleName#>;
using <#=projectName#>.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace <#=projectName#>.DAL.<#=moduleName#>
{
    /// <summary>
    /// <#=tableDesc#>记录
    /// </summary>
    public class DAL_<#=tableName#>
    {
        #region 新增<#=tableDesc#>记录

        /// <summary>
        /// 新增<#=tableDesc#>记录
        /// </summary>
        /// <param name="model"><#=tableDesc#>记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Add<#=tableName#>(<#=modelPre#><#=tableName#> model)
        {
            string sql = @"INSERT INTO <#=tableRealName#>
                                        (<#=columnDbTableString#>)
                                    VALUES (<#=columnParamString#>);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			<#
			foreach(Column c in table.Columns)
			{
				if(!GeneratorHelper.IsNeedFilter(c.Field))
					if(c.Key!="PRI"&&!c.Field.ToLower().Equals("updatetime")&&!c.Field.ToLower().Equals("createtime")){
			#>dictParamters["<#=c.Field#>"] = model.<#=c.Field#>;
			<#
			}
			}
			#>

            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改<#=tableDesc#>记录

        /// <summary>
        /// 根据主键Id修改<#=tableDesc#>记录
        /// </summary>
        /// <param name="model"><#=tableDesc#>记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Update<#=tableName#>(<#=modelPre#><#=tableName#> model)
        {
            string sql = @"UPDATE <#=tableRealName#>
                                  SET <#=columnSetParamStr#>
                                WHERE <#=tablePrimaryKey#> = @<#=tablePrimaryKey#>;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            <#
			foreach(Column c in table.Columns)
			{
				if(!GeneratorHelper.IsNeedFilter(c.Field))
					if(!c.Field.ToLower().Equals("updatetime")&&!c.Field.ToLower().Equals("createtime")&&!c.Field.ToLower().Equals("createid")){
			#>dictParamters["<#=c.Field#>"] = model.<#=c.Field#>;
			<#
			}
			}
			#>
            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除<#=tableDesc#>记录

        /// <summary>
        /// 删除<#=tableDesc#>记录
        /// </summary>
        /// <param name="<#=tablePrimaryKey#>">主键Id</param>
        /// <returns></returns>
        public virtual bool Del<#=tableName#>(int <#=tablePrimaryKey#>)
        {
            string sql = "UPDATE <#=tableRealName#> SET Invalid = @Invalid WHERE <#=tablePrimaryKey#> = @<#=tablePrimaryKey#>";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["<#=tablePrimaryKey#>"] = <#=tablePrimaryKey#>;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取<#=tableDesc#>记录

        /// <summary>
        /// 获取<#=tableDesc#>记录
        /// </summary>
        /// <param name="<#=tablePrimaryKey#>">主键Id</param>
        /// <returns></returns>
        public virtual <#=modelPre#><#=tableName#> Get<#=tableName#>(int <#=tablePrimaryKey#>)
        {
            string sql = "select * from <#=tableRealName#> WHERE <#=tablePrimaryKey#> = @<#=tablePrimaryKey#>";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["<#=tablePrimaryKey#>"] = <#=tablePrimaryKey#>;

            return DBDataSourceHelper.GetSingleOrmData<<#=modelPre#><#=tableName#>>(sql, dictParamters);
        }

        #endregion 
    }
}
<#	
			manager.EndBlock();

			manager.StartBlock("DAL_"+tableName+"Ext.cs");

#>
using <#=projectName#>.DAL.<#=moduleName#>;
using <#=projectName#>.Model.<#=moduleName#>;
using <#=projectName#>.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace <#=projectName#>.DAL.Extend
{
    /// <summary>
    /// <#=tableDesc#>记录
    /// </summary>
    public class DAL_<#=tableName#>Ext : DAL_<#=tableName#>
    {

    }
}
<#	
			manager.EndBlock();

			//生成逻辑层
			manager.StartBlock("BLL_"+tableName+".cs");

#>
using <#=projectName#>.DAL.Extend;
using <#=projectName#>.DAL.<#=moduleName#>;
using <#=projectName#>.Model.<#=moduleName#>;

namespace <#=projectName#>.BLL.<#=moduleName#>
{
    /// <summary>
    /// <#=tableDesc#>记录
    /// </summary>
    public class BLL_<#=tableName#>
    {
        #region 私有变量

        private static DAL_<#=tableName#>Ext _dal = new DAL_<#=tableName#>Ext();

        #endregion

        #region 新增<#=tableDesc#>记录

        /// <summary>
        /// 新增<#=tableDesc#>记录
        /// </summary>
        /// <param name="model"><#=tableDesc#>记录</param>
        /// <returns>新增记录Id</returns>
        public int Add<#=tableName#>(<#=modelPre#><#=tableName#> model)
        {
            return _dal.Add<#=tableName#>(model);
        }

        #endregion

        #region 修改<#=tableDesc#>记录

        /// <summary>
        /// 根据主键Id修改<#=tableDesc#>记录
        /// </summary>
        /// <param name="model"><#=tableDesc#>记录</param>
        /// <returns>返回true或false</returns>
        public bool Update<#=tableName#>(<#=modelPre#><#=tableName#> model)
        {
            return _dal.Update<#=tableName#>(model);
        }

        #endregion

        #region 删除<#=tableDesc#>记录

        /// <summary>
        /// 删除<#=tableDesc#>记录
        /// </summary>
        /// <param name="<#=tablePrimaryKey#>">主键Id</param>
        /// <returns></returns>
        public bool Del<#=tableName#>(int <#=tablePrimaryKey#>)
        {
            return _dal.Del<#=tableName#>(<#=tablePrimaryKey#>);
        }

        #endregion 

		#region 获取<#=tableDesc#>记录

        /// <summary>
        /// 获取<#=tableDesc#>记录
        /// </summary>
        /// <param name="<#=tablePrimaryKey#>">主键Id</param>
        /// <returns></returns>
        public <#=modelPre#><#=tableName#> Get<#=tableName#>(int <#=tablePrimaryKey#>)
        {
            return _dal.Get<#=tableName#>(<#=tablePrimaryKey#>);
        }

        #endregion 
    }
}	

<#
			manager.EndBlock();
        }
    }

	dbSchema.Dispose();
	manager.Process(true);

#>