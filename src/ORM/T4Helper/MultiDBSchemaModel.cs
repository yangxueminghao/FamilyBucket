










//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 公积金账套
	/// </summary>
	public class accumulationaccount
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public accumulationaccount()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 公积金账套编号
		/// </summary>
		public string AccumulationAccountID { get; set; }

		/// <summary>
		/// 公积金账套名称
		/// </summary>
		public string AccumulationAccountName { get; set; }

		/// <summary>
		/// 单位比例
		/// </summary>
		public decimal EnterprisePercent { get; set; }

		/// <summary>
		/// 个人比例
		/// </summary>
		public decimal PersonPercent { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte IsEnabled { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 更新时间
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? IsActive { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 公积金账套记录
    /// </summary>
    public class DAL_accumulationaccount
    {
        #region 新增公积金账套记录

        /// <summary>
        /// 新增公积金账套记录
        /// </summary>
        /// <param name="model">公积金账套记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addaccumulationaccount(accumulationaccount model)
        {
            string sql = @"INSERT INTO accumulationaccount
                                        (AccumulationAccountName,EnterprisePercent,PersonPercent,IsEnabled,IsActive)
                                    VALUES (@AccumulationAccountName,@EnterprisePercent,@PersonPercent,@IsEnabled,@IsActive);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AccumulationAccountName"] = model.AccumulationAccountName;
			dictParamters["EnterprisePercent"] = model.EnterprisePercent;
			dictParamters["PersonPercent"] = model.PersonPercent;
			dictParamters["IsEnabled"] = model.IsEnabled;
			dictParamters["IsActive"] = model.IsActive;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改公积金账套记录

        /// <summary>
        /// 根据主键Id修改公积金账套记录
        /// </summary>
        /// <param name="model">公积金账套记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateaccumulationaccount(accumulationaccount model)
        {
            string sql = @"UPDATE accumulationaccount
                                  SET AccumulationAccountName=@AccumulationAccountName,EnterprisePercent=@EnterprisePercent,PersonPercent=@PersonPercent,IsEnabled=@IsEnabled,IsActive=@IsActive
                                WHERE AccumulationAccountID = @AccumulationAccountID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["AccumulationAccountID"] = model.AccumulationAccountID;
			dictParamters["AccumulationAccountName"] = model.AccumulationAccountName;
			dictParamters["EnterprisePercent"] = model.EnterprisePercent;
			dictParamters["PersonPercent"] = model.PersonPercent;
			dictParamters["IsEnabled"] = model.IsEnabled;
			dictParamters["IsActive"] = model.IsActive;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除公积金账套记录

        /// <summary>
        /// 删除公积金账套记录
        /// </summary>
        /// <param name="AccumulationAccountID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delaccumulationaccount(int AccumulationAccountID)
        {
            string sql = "UPDATE accumulationaccount SET Invalid = @Invalid WHERE AccumulationAccountID = @AccumulationAccountID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AccumulationAccountID"] = AccumulationAccountID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取公积金账套记录

        /// <summary>
        /// 获取公积金账套记录
        /// </summary>
        /// <param name="AccumulationAccountID">主键Id</param>
        /// <returns></returns>
        public virtual accumulationaccount Getaccumulationaccount(int AccumulationAccountID)
        {
            string sql = "select * from accumulationaccount WHERE AccumulationAccountID = @AccumulationAccountID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AccumulationAccountID"] = AccumulationAccountID;

            return DBDataSourceHelper.GetSingleOrmData<accumulationaccount>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 公积金账套记录
    /// </summary>
    public class DAL_accumulationaccountExt : DAL_accumulationaccount
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 公积金账套记录
    /// </summary>
    public class BLL_accumulationaccount
    {
        #region 私有变量

        private static DAL_accumulationaccountExt _dal = new DAL_accumulationaccountExt();

        #endregion

        #region 新增公积金账套记录

        /// <summary>
        /// 新增公积金账套记录
        /// </summary>
        /// <param name="model">公积金账套记录</param>
        /// <returns>新增记录Id</returns>
        public int Addaccumulationaccount(accumulationaccount model)
        {
            return _dal.Addaccumulationaccount(model);
        }

        #endregion

        #region 修改公积金账套记录

        /// <summary>
        /// 根据主键Id修改公积金账套记录
        /// </summary>
        /// <param name="model">公积金账套记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateaccumulationaccount(accumulationaccount model)
        {
            return _dal.Updateaccumulationaccount(model);
        }

        #endregion

        #region 删除公积金账套记录

        /// <summary>
        /// 删除公积金账套记录
        /// </summary>
        /// <param name="AccumulationAccountID">主键Id</param>
        /// <returns></returns>
        public bool Delaccumulationaccount(int AccumulationAccountID)
        {
            return _dal.Delaccumulationaccount(AccumulationAccountID);
        }

        #endregion 

		#region 获取公积金账套记录

        /// <summary>
        /// 获取公积金账套记录
        /// </summary>
        /// <param name="AccumulationAccountID">主键Id</param>
        /// <returns></returns>
        public accumulationaccount Getaccumulationaccount(int AccumulationAccountID)
        {
            return _dal.Getaccumulationaccount(AccumulationAccountID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class activityapplication
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public activityapplication()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 报名ID
		/// </summary>
		public string ApplicationID { get; set; }

		/// <summary>
		/// 公司名称
		/// </summary>
		public string CompanyName { get; set; }

		/// <summary>
		/// 手机号码
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 公司电话
		/// </summary>
		public string CompanyPhone { get; set; }

		/// <summary>
		/// 报名时间
		/// </summary>
		public DateTime? DateCreated { get; set; }

		/// <summary>
		/// 更新时间
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 报名业务
		/// </summary>
		public string AttendBusiness { get; set; }

		/// <summary>
		/// 报名地址
		/// </summary>
		public string AttendUrl { get; set; }

		/// <summary>
		/// 平台类型
		/// </summary>
		public string PlatformType { get; set; }

		/// <summary>
		/// 信息是否有效
		/// </summary>
		public sbyte IsEffective { get; set; }

		/// <summary>
		/// 来源渠道
		/// </summary>
		public string SoureChannel { get; set; }

		/// <summary>
		/// 具体来源
		/// </summary>
		public string SpecificSource { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_activityapplication
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addactivityapplication(activityapplication model)
        {
            string sql = @"INSERT INTO activityapplication
                                        (ApplicationID,CompanyName,Mobile,CompanyPhone,DateCreated,AttendBusiness,AttendUrl,PlatformType,IsEffective,SoureChannel,SpecificSource)
                                    VALUES (@ApplicationID,@CompanyName,@Mobile,@CompanyPhone,@DateCreated,@AttendBusiness,@AttendUrl,@PlatformType,@IsEffective,@SoureChannel,@SpecificSource);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ApplicationID"] = model.ApplicationID;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["CompanyPhone"] = model.CompanyPhone;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["AttendBusiness"] = model.AttendBusiness;
			dictParamters["AttendUrl"] = model.AttendUrl;
			dictParamters["PlatformType"] = model.PlatformType;
			dictParamters["IsEffective"] = model.IsEffective;
			dictParamters["SoureChannel"] = model.SoureChannel;
			dictParamters["SpecificSource"] = model.SpecificSource;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateactivityapplication(activityapplication model)
        {
            string sql = @"UPDATE activityapplication
                                  SET ApplicationID=@ApplicationID,CompanyName=@CompanyName,Mobile=@Mobile,CompanyPhone=@CompanyPhone,DateCreated=@DateCreated,AttendBusiness=@AttendBusiness,AttendUrl=@AttendUrl,PlatformType=@PlatformType,IsEffective=@IsEffective,SoureChannel=@SoureChannel,SpecificSource=@SpecificSource
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["ApplicationID"] = model.ApplicationID;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["CompanyPhone"] = model.CompanyPhone;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["AttendBusiness"] = model.AttendBusiness;
			dictParamters["AttendUrl"] = model.AttendUrl;
			dictParamters["PlatformType"] = model.PlatformType;
			dictParamters["IsEffective"] = model.IsEffective;
			dictParamters["SoureChannel"] = model.SoureChannel;
			dictParamters["SpecificSource"] = model.SpecificSource;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delactivityapplication(int ID)
        {
            string sql = "UPDATE activityapplication SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual activityapplication Getactivityapplication(int ID)
        {
            string sql = "select * from activityapplication WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<activityapplication>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_activityapplicationExt : DAL_activityapplication
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_activityapplication
    {
        #region 私有变量

        private static DAL_activityapplicationExt _dal = new DAL_activityapplicationExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addactivityapplication(activityapplication model)
        {
            return _dal.Addactivityapplication(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateactivityapplication(activityapplication model)
        {
            return _dal.Updateactivityapplication(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delactivityapplication(int ID)
        {
            return _dal.Delactivityapplication(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public activityapplication Getactivityapplication(int ID)
        {
            return _dal.Getactivityapplication(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class adminmenu
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public adminmenu()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int RowID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MenuID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MenuName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MenuParentID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MenuUrl { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? MenuOrder { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? MenuEnable { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MenuDiscription { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? MenuTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? MenuLevel { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_adminmenu
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addadminmenu(adminmenu model)
        {
            string sql = @"INSERT INTO adminmenu
                                        (MenuID,MenuName,MenuParentID,MenuUrl,MenuOrder,MenuEnable,MenuDiscription,MenuTime,MenuLevel)
                                    VALUES (@MenuID,@MenuName,@MenuParentID,@MenuUrl,@MenuOrder,@MenuEnable,@MenuDiscription,@MenuTime,@MenuLevel);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MenuID"] = model.MenuID;
			dictParamters["MenuName"] = model.MenuName;
			dictParamters["MenuParentID"] = model.MenuParentID;
			dictParamters["MenuUrl"] = model.MenuUrl;
			dictParamters["MenuOrder"] = model.MenuOrder;
			dictParamters["MenuEnable"] = model.MenuEnable;
			dictParamters["MenuDiscription"] = model.MenuDiscription;
			dictParamters["MenuTime"] = model.MenuTime;
			dictParamters["MenuLevel"] = model.MenuLevel;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateadminmenu(adminmenu model)
        {
            string sql = @"UPDATE adminmenu
                                  SET MenuID=@MenuID,MenuName=@MenuName,MenuParentID=@MenuParentID,MenuUrl=@MenuUrl,MenuOrder=@MenuOrder,MenuEnable=@MenuEnable,MenuDiscription=@MenuDiscription,MenuTime=@MenuTime,MenuLevel=@MenuLevel
                                WHERE RowID = @RowID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["RowID"] = model.RowID;
			dictParamters["MenuID"] = model.MenuID;
			dictParamters["MenuName"] = model.MenuName;
			dictParamters["MenuParentID"] = model.MenuParentID;
			dictParamters["MenuUrl"] = model.MenuUrl;
			dictParamters["MenuOrder"] = model.MenuOrder;
			dictParamters["MenuEnable"] = model.MenuEnable;
			dictParamters["MenuDiscription"] = model.MenuDiscription;
			dictParamters["MenuTime"] = model.MenuTime;
			dictParamters["MenuLevel"] = model.MenuLevel;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual bool Deladminmenu(int RowID)
        {
            string sql = "UPDATE adminmenu SET Invalid = @Invalid WHERE RowID = @RowID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual adminmenu Getadminmenu(int RowID)
        {
            string sql = "select * from adminmenu WHERE RowID = @RowID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;

            return DBDataSourceHelper.GetSingleOrmData<adminmenu>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_adminmenuExt : DAL_adminmenu
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_adminmenu
    {
        #region 私有变量

        private static DAL_adminmenuExt _dal = new DAL_adminmenuExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addadminmenu(adminmenu model)
        {
            return _dal.Addadminmenu(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateadminmenu(adminmenu model)
        {
            return _dal.Updateadminmenu(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public bool Deladminmenu(int RowID)
        {
            return _dal.Deladminmenu(RowID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public adminmenu Getadminmenu(int RowID)
        {
            return _dal.Getadminmenu(RowID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class adminuser
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public adminuser()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string RowID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Password { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string FullName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModifed { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? LastLoginDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string LastLoginIP { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MenuRowID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserAvatarUrl { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_adminuser
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addadminuser(adminuser model)
        {
            string sql = @"INSERT INTO adminuser
                                        (UserID,UserName,Password,FullName,DateCreated,DateModifed,LastLoginDate,LastLoginIP,MenuRowID,UserAvatarUrl)
                                    VALUES (@UserID,@UserName,@Password,@FullName,@DateCreated,@DateModifed,@LastLoginDate,@LastLoginIP,@MenuRowID,@UserAvatarUrl);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserID"] = model.UserID;
			dictParamters["UserName"] = model.UserName;
			dictParamters["Password"] = model.Password;
			dictParamters["FullName"] = model.FullName;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModifed"] = model.DateModifed;
			dictParamters["LastLoginDate"] = model.LastLoginDate;
			dictParamters["LastLoginIP"] = model.LastLoginIP;
			dictParamters["MenuRowID"] = model.MenuRowID;
			dictParamters["UserAvatarUrl"] = model.UserAvatarUrl;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateadminuser(adminuser model)
        {
            string sql = @"UPDATE adminuser
                                  SET UserID=@UserID,UserName=@UserName,Password=@Password,FullName=@FullName,DateCreated=@DateCreated,DateModifed=@DateModifed,LastLoginDate=@LastLoginDate,LastLoginIP=@LastLoginIP,MenuRowID=@MenuRowID,UserAvatarUrl=@UserAvatarUrl
                                WHERE RowID = @RowID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["RowID"] = model.RowID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["UserName"] = model.UserName;
			dictParamters["Password"] = model.Password;
			dictParamters["FullName"] = model.FullName;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModifed"] = model.DateModifed;
			dictParamters["LastLoginDate"] = model.LastLoginDate;
			dictParamters["LastLoginIP"] = model.LastLoginIP;
			dictParamters["MenuRowID"] = model.MenuRowID;
			dictParamters["UserAvatarUrl"] = model.UserAvatarUrl;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual bool Deladminuser(int RowID)
        {
            string sql = "UPDATE adminuser SET Invalid = @Invalid WHERE RowID = @RowID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual adminuser Getadminuser(int RowID)
        {
            string sql = "select * from adminuser WHERE RowID = @RowID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;

            return DBDataSourceHelper.GetSingleOrmData<adminuser>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_adminuserExt : DAL_adminuser
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_adminuser
    {
        #region 私有变量

        private static DAL_adminuserExt _dal = new DAL_adminuserExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addadminuser(adminuser model)
        {
            return _dal.Addadminuser(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateadminuser(adminuser model)
        {
            return _dal.Updateadminuser(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public bool Deladminuser(int RowID)
        {
            return _dal.Deladminuser(RowID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public adminuser Getadminuser(int RowID)
        {
            return _dal.Getadminuser(RowID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class adsense
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public adsense()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 类型：0标签 1官网首页 2咨询页 3社保代缴产品页 4电子工资条产品页5薪资代发产品页 6注册/登录页
		/// </summary>
		public int Type { get; set; }

		/// <summary>
		/// 标签/广告位名称
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 顺序
		/// </summary>
		public int Sort { get; set; }

		/// <summary>
		/// 广告位链接
		/// </summary>
		public string URL { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime? CreateTime { get; set; }

		/// <summary>
		/// 创建人账户ID
		/// </summary>
		public string CreaterID { get; set; }

		/// <summary>
		/// 修改时间
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 修改账户ID
		/// </summary>
		public string UpdaterID { get; set; }

		/// <summary>
		/// 是否删除 0否 1是
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 是否显示
		/// </summary>
		public sbyte IsShow { get; set; }

		/// <summary>
		/// 是否置顶
		/// </summary>
		public sbyte IsTop { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ImgURL { get; set; }

		/// <summary>
		/// 描述
		/// </summary>
		public string Description { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_adsense
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addadsense(adsense model)
        {
            string sql = @"INSERT INTO adsense
                                        (Type,Name,Sort,URL,CreaterID,UpdaterID,IsDelete,IsShow,IsTop,ImgURL,Description)
                                    VALUES (@Type,@Name,@Sort,@URL,@CreaterID,@UpdaterID,@IsDelete,@IsShow,@IsTop,@ImgURL,@Description);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Type"] = model.Type;
			dictParamters["Name"] = model.Name;
			dictParamters["Sort"] = model.Sort;
			dictParamters["URL"] = model.URL;
			dictParamters["CreaterID"] = model.CreaterID;
			dictParamters["UpdaterID"] = model.UpdaterID;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["IsShow"] = model.IsShow;
			dictParamters["IsTop"] = model.IsTop;
			dictParamters["ImgURL"] = model.ImgURL;
			dictParamters["Description"] = model.Description;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateadsense(adsense model)
        {
            string sql = @"UPDATE adsense
                                  SET Type=@Type,Name=@Name,Sort=@Sort,URL=@URL,CreaterID=@CreaterID,UpdaterID=@UpdaterID,IsDelete=@IsDelete,IsShow=@IsShow,IsTop=@IsTop,ImgURL=@ImgURL,Description=@Description
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["Type"] = model.Type;
			dictParamters["Name"] = model.Name;
			dictParamters["Sort"] = model.Sort;
			dictParamters["URL"] = model.URL;
			dictParamters["CreaterID"] = model.CreaterID;
			dictParamters["UpdaterID"] = model.UpdaterID;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["IsShow"] = model.IsShow;
			dictParamters["IsTop"] = model.IsTop;
			dictParamters["ImgURL"] = model.ImgURL;
			dictParamters["Description"] = model.Description;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Deladsense(int ID)
        {
            string sql = "UPDATE adsense SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual adsense Getadsense(int ID)
        {
            string sql = "select * from adsense WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<adsense>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_adsenseExt : DAL_adsense
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_adsense
    {
        #region 私有变量

        private static DAL_adsenseExt _dal = new DAL_adsenseExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addadsense(adsense model)
        {
            return _dal.Addadsense(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateadsense(adsense model)
        {
            return _dal.Updateadsense(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Deladsense(int ID)
        {
            return _dal.Deladsense(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public adsense Getadsense(int ID)
        {
            return _dal.Getadsense(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class analysiscostingad
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public analysiscostingad()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string terminalType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string attendBusiness { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string sourceChannel { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string specificSource { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? createDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? manualInputExposure { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? manualInputClick { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? sumInquired { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? sumSignUp { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_analysiscostingad
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addanalysiscostingad(analysiscostingad model)
        {
            string sql = @"INSERT INTO analysiscostingad
                                        (terminalType,attendBusiness,sourceChannel,specificSource,createDate,manualInputExposure,manualInputClick,sumInquired,sumSignUp)
                                    VALUES (@terminalType,@attendBusiness,@sourceChannel,@specificSource,@createDate,@manualInputExposure,@manualInputClick,@sumInquired,@sumSignUp);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["terminalType"] = model.terminalType;
			dictParamters["attendBusiness"] = model.attendBusiness;
			dictParamters["sourceChannel"] = model.sourceChannel;
			dictParamters["specificSource"] = model.specificSource;
			dictParamters["createDate"] = model.createDate;
			dictParamters["manualInputExposure"] = model.manualInputExposure;
			dictParamters["manualInputClick"] = model.manualInputClick;
			dictParamters["sumInquired"] = model.sumInquired;
			dictParamters["sumSignUp"] = model.sumSignUp;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateanalysiscostingad(analysiscostingad model)
        {
            string sql = @"UPDATE analysiscostingad
                                  SET terminalType=@terminalType,attendBusiness=@attendBusiness,sourceChannel=@sourceChannel,specificSource=@specificSource,createDate=@createDate,manualInputExposure=@manualInputExposure,manualInputClick=@manualInputClick,sumInquired=@sumInquired,sumSignUp=@sumSignUp
                                WHERE id = @id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["id"] = model.id;
			dictParamters["terminalType"] = model.terminalType;
			dictParamters["attendBusiness"] = model.attendBusiness;
			dictParamters["sourceChannel"] = model.sourceChannel;
			dictParamters["specificSource"] = model.specificSource;
			dictParamters["createDate"] = model.createDate;
			dictParamters["manualInputExposure"] = model.manualInputExposure;
			dictParamters["manualInputClick"] = model.manualInputClick;
			dictParamters["sumInquired"] = model.sumInquired;
			dictParamters["sumSignUp"] = model.sumSignUp;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delanalysiscostingad(int id)
        {
            string sql = "UPDATE analysiscostingad SET Invalid = @Invalid WHERE id = @id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["id"] = id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public virtual analysiscostingad Getanalysiscostingad(int id)
        {
            string sql = "select * from analysiscostingad WHERE id = @id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["id"] = id;

            return DBDataSourceHelper.GetSingleOrmData<analysiscostingad>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_analysiscostingadExt : DAL_analysiscostingad
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_analysiscostingad
    {
        #region 私有变量

        private static DAL_analysiscostingadExt _dal = new DAL_analysiscostingadExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addanalysiscostingad(analysiscostingad model)
        {
            return _dal.Addanalysiscostingad(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateanalysiscostingad(analysiscostingad model)
        {
            return _dal.Updateanalysiscostingad(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public bool Delanalysiscostingad(int id)
        {
            return _dal.Delanalysiscostingad(id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public analysiscostingad Getanalysiscostingad(int id)
        {
            return _dal.Getanalysiscostingad(id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class article
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public article()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ArticalGuid { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CategoryGuid { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SubTitle { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Author { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Abstract { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Keywords { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Content { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ConverImageURL { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int ViewCount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? DatePublished { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte Deleted { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte? IsHot { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string RecommendPosition { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CreateUserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ModifyUserID { get; set; }

		/// <summary>
		/// 是否用于落地页
		/// </summary>
		public sbyte IsUsedLandingPage { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Labels { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string GrabId { get; set; }

		/// <summary>
		/// 是否显示
		/// </summary>
		public sbyte? IsShow { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_article
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addarticle(article model)
        {
            string sql = @"INSERT INTO article
                                        (ArticalGuid,CategoryGuid,Title,SubTitle,Author,Abstract,Keywords,Content,ConverImageURL,ViewCount,DateCreated,DateModified,DatePublished,Deleted,City,IsHot,RecommendPosition,CreateUserID,ModifyUserID,IsUsedLandingPage,Labels,GrabId,IsShow)
                                    VALUES (@ArticalGuid,@CategoryGuid,@Title,@SubTitle,@Author,@Abstract,@Keywords,@Content,@ConverImageURL,@ViewCount,@DateCreated,@DateModified,@DatePublished,@Deleted,@City,@IsHot,@RecommendPosition,@CreateUserID,@ModifyUserID,@IsUsedLandingPage,@Labels,@GrabId,@IsShow);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ArticalGuid"] = model.ArticalGuid;
			dictParamters["CategoryGuid"] = model.CategoryGuid;
			dictParamters["Title"] = model.Title;
			dictParamters["SubTitle"] = model.SubTitle;
			dictParamters["Author"] = model.Author;
			dictParamters["Abstract"] = model.Abstract;
			dictParamters["Keywords"] = model.Keywords;
			dictParamters["Content"] = model.Content;
			dictParamters["ConverImageURL"] = model.ConverImageURL;
			dictParamters["ViewCount"] = model.ViewCount;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["DatePublished"] = model.DatePublished;
			dictParamters["Deleted"] = model.Deleted;
			dictParamters["City"] = model.City;
			dictParamters["IsHot"] = model.IsHot;
			dictParamters["RecommendPosition"] = model.RecommendPosition;
			dictParamters["CreateUserID"] = model.CreateUserID;
			dictParamters["ModifyUserID"] = model.ModifyUserID;
			dictParamters["IsUsedLandingPage"] = model.IsUsedLandingPage;
			dictParamters["Labels"] = model.Labels;
			dictParamters["GrabId"] = model.GrabId;
			dictParamters["IsShow"] = model.IsShow;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatearticle(article model)
        {
            string sql = @"UPDATE article
                                  SET ArticalGuid=@ArticalGuid,CategoryGuid=@CategoryGuid,Title=@Title,SubTitle=@SubTitle,Author=@Author,Abstract=@Abstract,Keywords=@Keywords,Content=@Content,ConverImageURL=@ConverImageURL,ViewCount=@ViewCount,DateCreated=@DateCreated,DateModified=@DateModified,DatePublished=@DatePublished,Deleted=@Deleted,City=@City,IsHot=@IsHot,RecommendPosition=@RecommendPosition,CreateUserID=@CreateUserID,ModifyUserID=@ModifyUserID,IsUsedLandingPage=@IsUsedLandingPage,Labels=@Labels,GrabId=@GrabId,IsShow=@IsShow
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["ArticalGuid"] = model.ArticalGuid;
			dictParamters["CategoryGuid"] = model.CategoryGuid;
			dictParamters["Title"] = model.Title;
			dictParamters["SubTitle"] = model.SubTitle;
			dictParamters["Author"] = model.Author;
			dictParamters["Abstract"] = model.Abstract;
			dictParamters["Keywords"] = model.Keywords;
			dictParamters["Content"] = model.Content;
			dictParamters["ConverImageURL"] = model.ConverImageURL;
			dictParamters["ViewCount"] = model.ViewCount;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["DatePublished"] = model.DatePublished;
			dictParamters["Deleted"] = model.Deleted;
			dictParamters["City"] = model.City;
			dictParamters["IsHot"] = model.IsHot;
			dictParamters["RecommendPosition"] = model.RecommendPosition;
			dictParamters["CreateUserID"] = model.CreateUserID;
			dictParamters["ModifyUserID"] = model.ModifyUserID;
			dictParamters["IsUsedLandingPage"] = model.IsUsedLandingPage;
			dictParamters["Labels"] = model.Labels;
			dictParamters["GrabId"] = model.GrabId;
			dictParamters["IsShow"] = model.IsShow;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delarticle(int Id)
        {
            string sql = "UPDATE article SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual article Getarticle(int Id)
        {
            string sql = "select * from article WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<article>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_articleExt : DAL_article
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_article
    {
        #region 私有变量

        private static DAL_articleExt _dal = new DAL_articleExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addarticle(article model)
        {
            return _dal.Addarticle(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatearticle(article model)
        {
            return _dal.Updatearticle(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Delarticle(int Id)
        {
            return _dal.Delarticle(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public article Getarticle(int Id)
        {
            return _dal.Getarticle(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class article_hotlabels
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public article_hotlabels()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public long Id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ArticleGuid { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? HotLabelId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_article_hotlabels
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addarticle_hotlabels(article_hotlabels model)
        {
            string sql = @"INSERT INTO article_hotlabels
                                        (ArticleGuid,HotLabelId)
                                    VALUES (@ArticleGuid,@HotLabelId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ArticleGuid"] = model.ArticleGuid;
			dictParamters["HotLabelId"] = model.HotLabelId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatearticle_hotlabels(article_hotlabels model)
        {
            string sql = @"UPDATE article_hotlabels
                                  SET ArticleGuid=@ArticleGuid,HotLabelId=@HotLabelId
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["ArticleGuid"] = model.ArticleGuid;
			dictParamters["HotLabelId"] = model.HotLabelId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delarticle_hotlabels(int Id)
        {
            string sql = "UPDATE article_hotlabels SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual article_hotlabels Getarticle_hotlabels(int Id)
        {
            string sql = "select * from article_hotlabels WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<article_hotlabels>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_article_hotlabelsExt : DAL_article_hotlabels
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_article_hotlabels
    {
        #region 私有变量

        private static DAL_article_hotlabelsExt _dal = new DAL_article_hotlabelsExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addarticle_hotlabels(article_hotlabels model)
        {
            return _dal.Addarticle_hotlabels(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatearticle_hotlabels(article_hotlabels model)
        {
            return _dal.Updatearticle_hotlabels(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Delarticle_hotlabels(int Id)
        {
            return _dal.Delarticle_hotlabels(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public article_hotlabels Getarticle_hotlabels(int Id)
        {
            return _dal.Getarticle_hotlabels(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class articlecategory
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public articlecategory()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// 栏目Guid
		/// </summary>
		public string CategoryGuid { get; set; }

		/// <summary>
		/// 父级栏目Guid
		/// </summary>
		public string ParentGuid { get; set; }

		/// <summary>
		/// 栏目名称
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 是否系统分类（系统分类不可删除）
		/// </summary>
		public sbyte IsSystem { get; set; }

		/// <summary>
		/// 状态
		/// </summary>
		public int Status { get; set; }

		/// <summary>
		/// 管理员备注
		/// </summary>
		public string AdminComment { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte Deleted { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 修改时间
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte IsVisible { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ImgUrl { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int SortNumber { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_articlecategory
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addarticlecategory(articlecategory model)
        {
            string sql = @"INSERT INTO articlecategory
                                        (CategoryGuid,ParentGuid,Name,IsSystem,Status,AdminComment,Deleted,DateCreated,DateModified,IsVisible,ImgUrl,SortNumber)
                                    VALUES (@CategoryGuid,@ParentGuid,@Name,@IsSystem,@Status,@AdminComment,@Deleted,@DateCreated,@DateModified,@IsVisible,@ImgUrl,@SortNumber);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CategoryGuid"] = model.CategoryGuid;
			dictParamters["ParentGuid"] = model.ParentGuid;
			dictParamters["Name"] = model.Name;
			dictParamters["IsSystem"] = model.IsSystem;
			dictParamters["Status"] = model.Status;
			dictParamters["AdminComment"] = model.AdminComment;
			dictParamters["Deleted"] = model.Deleted;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsVisible"] = model.IsVisible;
			dictParamters["ImgUrl"] = model.ImgUrl;
			dictParamters["SortNumber"] = model.SortNumber;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatearticlecategory(articlecategory model)
        {
            string sql = @"UPDATE articlecategory
                                  SET CategoryGuid=@CategoryGuid,ParentGuid=@ParentGuid,Name=@Name,IsSystem=@IsSystem,Status=@Status,AdminComment=@AdminComment,Deleted=@Deleted,DateCreated=@DateCreated,DateModified=@DateModified,IsVisible=@IsVisible,ImgUrl=@ImgUrl,SortNumber=@SortNumber
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["CategoryGuid"] = model.CategoryGuid;
			dictParamters["ParentGuid"] = model.ParentGuid;
			dictParamters["Name"] = model.Name;
			dictParamters["IsSystem"] = model.IsSystem;
			dictParamters["Status"] = model.Status;
			dictParamters["AdminComment"] = model.AdminComment;
			dictParamters["Deleted"] = model.Deleted;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsVisible"] = model.IsVisible;
			dictParamters["ImgUrl"] = model.ImgUrl;
			dictParamters["SortNumber"] = model.SortNumber;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delarticlecategory(int Id)
        {
            string sql = "UPDATE articlecategory SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual articlecategory Getarticlecategory(int Id)
        {
            string sql = "select * from articlecategory WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<articlecategory>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_articlecategoryExt : DAL_articlecategory
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_articlecategory
    {
        #region 私有变量

        private static DAL_articlecategoryExt _dal = new DAL_articlecategoryExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addarticlecategory(articlecategory model)
        {
            return _dal.Addarticlecategory(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatearticlecategory(articlecategory model)
        {
            return _dal.Updatearticlecategory(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Delarticlecategory(int Id)
        {
            return _dal.Delarticlecategory(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public articlecategory Getarticlecategory(int Id)
        {
            return _dal.Getarticlecategory(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class articleposition
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public articleposition()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ArticleGuid { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string RecommendPosition { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_articleposition
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addarticleposition(articleposition model)
        {
            string sql = @"INSERT INTO articleposition
                                        (ArticleGuid,City,RecommendPosition)
                                    VALUES (@ArticleGuid,@City,@RecommendPosition);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ArticleGuid"] = model.ArticleGuid;
			dictParamters["City"] = model.City;
			dictParamters["RecommendPosition"] = model.RecommendPosition;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatearticleposition(articleposition model)
        {
            string sql = @"UPDATE articleposition
                                  SET ArticleGuid=@ArticleGuid,City=@City,RecommendPosition=@RecommendPosition
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["ArticleGuid"] = model.ArticleGuid;
			dictParamters["City"] = model.City;
			dictParamters["RecommendPosition"] = model.RecommendPosition;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delarticleposition(int ID)
        {
            string sql = "UPDATE articleposition SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual articleposition Getarticleposition(int ID)
        {
            string sql = "select * from articleposition WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<articleposition>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_articlepositionExt : DAL_articleposition
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_articleposition
    {
        #region 私有变量

        private static DAL_articlepositionExt _dal = new DAL_articlepositionExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addarticleposition(articleposition model)
        {
            return _dal.Addarticleposition(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatearticleposition(articleposition model)
        {
            return _dal.Updatearticleposition(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delarticleposition(int ID)
        {
            return _dal.Delarticleposition(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public articleposition Getarticleposition(int ID)
        {
            return _dal.Getarticleposition(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class attachment
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public attachment()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 附件表ID
		/// </summary>
		public string AttachmentID { get; set; }

		/// <summary>
		/// 所属表单ID
		/// </summary>
		public string FormID { get; set; }

		/// <summary>
		/// 表单类型
		/// </summary>
		public int FormType { get; set; }

		/// <summary>
		/// 附件名称
		/// </summary>
		public string AttachmentName { get; set; }

		/// <summary>
		/// 附件路径
		/// </summary>
		public string AttachmentURL { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 上传用户ID
		/// </summary>
		public string UserID { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_attachment
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addattachment(attachment model)
        {
            string sql = @"INSERT INTO attachment
                                        (FormID,FormType,AttachmentName,AttachmentURL,IsDelete,UserID)
                                    VALUES (@FormID,@FormType,@AttachmentName,@AttachmentURL,@IsDelete,@UserID);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["FormID"] = model.FormID;
			dictParamters["FormType"] = model.FormType;
			dictParamters["AttachmentName"] = model.AttachmentName;
			dictParamters["AttachmentURL"] = model.AttachmentURL;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["UserID"] = model.UserID;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateattachment(attachment model)
        {
            string sql = @"UPDATE attachment
                                  SET FormID=@FormID,FormType=@FormType,AttachmentName=@AttachmentName,AttachmentURL=@AttachmentURL,IsDelete=@IsDelete,UserID=@UserID
                                WHERE AttachmentID = @AttachmentID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["AttachmentID"] = model.AttachmentID;
			dictParamters["FormID"] = model.FormID;
			dictParamters["FormType"] = model.FormType;
			dictParamters["AttachmentName"] = model.AttachmentName;
			dictParamters["AttachmentURL"] = model.AttachmentURL;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["UserID"] = model.UserID;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="AttachmentID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delattachment(int AttachmentID)
        {
            string sql = "UPDATE attachment SET Invalid = @Invalid WHERE AttachmentID = @AttachmentID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AttachmentID"] = AttachmentID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="AttachmentID">主键Id</param>
        /// <returns></returns>
        public virtual attachment Getattachment(int AttachmentID)
        {
            string sql = "select * from attachment WHERE AttachmentID = @AttachmentID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AttachmentID"] = AttachmentID;

            return DBDataSourceHelper.GetSingleOrmData<attachment>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_attachmentExt : DAL_attachment
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_attachment
    {
        #region 私有变量

        private static DAL_attachmentExt _dal = new DAL_attachmentExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addattachment(attachment model)
        {
            return _dal.Addattachment(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateattachment(attachment model)
        {
            return _dal.Updateattachment(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="AttachmentID">主键Id</param>
        /// <returns></returns>
        public bool Delattachment(int AttachmentID)
        {
            return _dal.Delattachment(AttachmentID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="AttachmentID">主键Id</param>
        /// <returns></returns>
        public attachment Getattachment(int AttachmentID)
        {
            return _dal.Getattachment(AttachmentID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class base_city
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public base_city()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// ID
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 身份名称
		/// </summary>
		public string ProvinceName { get; set; }

		/// <summary>
		/// 城市名称
		/// </summary>
		public string CityName { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_base_city
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addbase_city(base_city model)
        {
            string sql = @"INSERT INTO base_city
                                        (ProvinceName,CityName)
                                    VALUES (@ProvinceName,@CityName);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ProvinceName"] = model.ProvinceName;
			dictParamters["CityName"] = model.CityName;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatebase_city(base_city model)
        {
            string sql = @"UPDATE base_city
                                  SET ProvinceName=@ProvinceName,CityName=@CityName
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["ProvinceName"] = model.ProvinceName;
			dictParamters["CityName"] = model.CityName;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delbase_city(int ID)
        {
            string sql = "UPDATE base_city SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual base_city Getbase_city(int ID)
        {
            string sql = "select * from base_city WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<base_city>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_base_cityExt : DAL_base_city
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_base_city
    {
        #region 私有变量

        private static DAL_base_cityExt _dal = new DAL_base_cityExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addbase_city(base_city model)
        {
            return _dal.Addbase_city(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatebase_city(base_city model)
        {
            return _dal.Updatebase_city(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delbase_city(int ID)
        {
            return _dal.Delbase_city(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public base_city Getbase_city(int ID)
        {
            return _dal.Getbase_city(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class businesstype
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public businesstype()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string AttendBusiness { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_businesstype
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addbusinesstype(businesstype model)
        {
            string sql = @"INSERT INTO businesstype
                                        (AttendBusiness)
                                    VALUES (@AttendBusiness);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AttendBusiness"] = model.AttendBusiness;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatebusinesstype(businesstype model)
        {
            string sql = @"UPDATE businesstype
                                  SET AttendBusiness=@AttendBusiness
                                WHERE id = @id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["id"] = model.id;
			dictParamters["AttendBusiness"] = model.AttendBusiness;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delbusinesstype(int id)
        {
            string sql = "UPDATE businesstype SET Invalid = @Invalid WHERE id = @id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["id"] = id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public virtual businesstype Getbusinesstype(int id)
        {
            string sql = "select * from businesstype WHERE id = @id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["id"] = id;

            return DBDataSourceHelper.GetSingleOrmData<businesstype>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_businesstypeExt : DAL_businesstype
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_businesstype
    {
        #region 私有变量

        private static DAL_businesstypeExt _dal = new DAL_businesstypeExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addbusinesstype(businesstype model)
        {
            return _dal.Addbusinesstype(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatebusinesstype(businesstype model)
        {
            return _dal.Updatebusinesstype(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public bool Delbusinesstype(int id)
        {
            return _dal.Delbusinesstype(id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        public businesstype Getbusinesstype(int id)
        {
            return _dal.Getbusinesstype(id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class cityconfig
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public cityconfig()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 城市id
		/// </summary>
		public string CityId { get; set; }

		/// <summary>
		/// 城市名称
		/// </summary>
		public string CityName { get; set; }

		/// <summary>
		/// 服务费
		/// </summary>
		public decimal ServiceFee { get; set; }

		/// <summary>
		/// 预收费
		/// </summary>
		public decimal PreCharge { get; set; }

		/// <summary>
		/// 是否启用
		/// </summary>
		public sbyte? IsOpen { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime AddTime { get; set; }

		/// <summary>
		/// 修改时间
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal NewShemalServiceFee { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_cityconfig
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addcityconfig(cityconfig model)
        {
            string sql = @"INSERT INTO cityconfig
                                        (CityName,ServiceFee,PreCharge,IsOpen,AddTime,IsDelete,NewShemalServiceFee)
                                    VALUES (@CityName,@ServiceFee,@PreCharge,@IsOpen,@AddTime,@IsDelete,@NewShemalServiceFee);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CityName"] = model.CityName;
			dictParamters["ServiceFee"] = model.ServiceFee;
			dictParamters["PreCharge"] = model.PreCharge;
			dictParamters["IsOpen"] = model.IsOpen;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["NewShemalServiceFee"] = model.NewShemalServiceFee;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatecityconfig(cityconfig model)
        {
            string sql = @"UPDATE cityconfig
                                  SET CityName=@CityName,ServiceFee=@ServiceFee,PreCharge=@PreCharge,IsOpen=@IsOpen,AddTime=@AddTime,IsDelete=@IsDelete,NewShemalServiceFee=@NewShemalServiceFee
                                WHERE CityId = @CityId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["CityId"] = model.CityId;
			dictParamters["CityName"] = model.CityName;
			dictParamters["ServiceFee"] = model.ServiceFee;
			dictParamters["PreCharge"] = model.PreCharge;
			dictParamters["IsOpen"] = model.IsOpen;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["NewShemalServiceFee"] = model.NewShemalServiceFee;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="CityId">主键Id</param>
        /// <returns></returns>
        public virtual bool Delcityconfig(int CityId)
        {
            string sql = "UPDATE cityconfig SET Invalid = @Invalid WHERE CityId = @CityId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CityId"] = CityId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="CityId">主键Id</param>
        /// <returns></returns>
        public virtual cityconfig Getcityconfig(int CityId)
        {
            string sql = "select * from cityconfig WHERE CityId = @CityId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CityId"] = CityId;

            return DBDataSourceHelper.GetSingleOrmData<cityconfig>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_cityconfigExt : DAL_cityconfig
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_cityconfig
    {
        #region 私有变量

        private static DAL_cityconfigExt _dal = new DAL_cityconfigExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addcityconfig(cityconfig model)
        {
            return _dal.Addcityconfig(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatecityconfig(cityconfig model)
        {
            return _dal.Updatecityconfig(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="CityId">主键Id</param>
        /// <returns></returns>
        public bool Delcityconfig(int CityId)
        {
            return _dal.Delcityconfig(CityId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="CityId">主键Id</param>
        /// <returns></returns>
        public cityconfig Getcityconfig(int CityId)
        {
            return _dal.Getcityconfig(CityId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class co_bag
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public co_bag()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// LB202107120001"LB"+"年月日"+"当前礼包数"
		/// </summary>
		public string BagID { get; set; }

		/// <summary>
		/// 券礼包名称
		/// </summary>
		public string BagName { get; set; }

		/// <summary>
		/// 是否长期有效
		/// </summary>
		public sbyte IsLong { get; set; }

		/// <summary>
		/// 礼包有效期开始时间
		/// </summary>
		public DateTime? BeginTime { get; set; }

		/// <summary>
		/// 礼包有效期结束时间
		/// </summary>
		public DateTime? EndTime { get; set; }

		/// <summary>
		/// 发放量：0不限量 1限量
		/// </summary>
		public int IssuedType { get; set; }

		/// <summary>
		/// （限量才显示且必填） 礼包个数
		/// </summary>
		public int? BagNumbers { get; set; }

		/// <summary>
		/// 0发券 1领券
		/// </summary>
		public int SendType { get; set; }

		/// <summary>
		/// （类型发放才显示且必选）发放条件 枚举
		/// </summary>
		public int? Condition { get; set; }

		/// <summary>
		/// 0全部用户 1指定用户 2符合发放条件用户
		/// </summary>
		public int SendObject { get; set; }

		/// <summary>
		/// 导入文件全称（带后缀）
		/// </summary>
		public string FileName { get; set; }

		/// <summary>
		/// 阿里云服务器路径
		/// </summary>
		public string FileURL { get; set; }

		/// <summary>
		/// 是否启用
		/// </summary>
		public sbyte IsActive { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_bag
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addco_bag(co_bag model)
        {
            string sql = @"INSERT INTO co_bag
                                        (BagName,IsLong,BeginTime,EndTime,IssuedType,BagNumbers,SendType,Condition,SendObject,FileName,FileURL,IsActive,DateCreated,DateModified,IsDelete)
                                    VALUES (@BagName,@IsLong,@BeginTime,@EndTime,@IssuedType,@BagNumbers,@SendType,@Condition,@SendObject,@FileName,@FileURL,@IsActive,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagName"] = model.BagName;
			dictParamters["IsLong"] = model.IsLong;
			dictParamters["BeginTime"] = model.BeginTime;
			dictParamters["EndTime"] = model.EndTime;
			dictParamters["IssuedType"] = model.IssuedType;
			dictParamters["BagNumbers"] = model.BagNumbers;
			dictParamters["SendType"] = model.SendType;
			dictParamters["Condition"] = model.Condition;
			dictParamters["SendObject"] = model.SendObject;
			dictParamters["FileName"] = model.FileName;
			dictParamters["FileURL"] = model.FileURL;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateco_bag(co_bag model)
        {
            string sql = @"UPDATE co_bag
                                  SET BagName=@BagName,IsLong=@IsLong,BeginTime=@BeginTime,EndTime=@EndTime,IssuedType=@IssuedType,BagNumbers=@BagNumbers,SendType=@SendType,Condition=@Condition,SendObject=@SendObject,FileName=@FileName,FileURL=@FileURL,IsActive=@IsActive,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE BagID = @BagID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["BagID"] = model.BagID;
			dictParamters["BagName"] = model.BagName;
			dictParamters["IsLong"] = model.IsLong;
			dictParamters["BeginTime"] = model.BeginTime;
			dictParamters["EndTime"] = model.EndTime;
			dictParamters["IssuedType"] = model.IssuedType;
			dictParamters["BagNumbers"] = model.BagNumbers;
			dictParamters["SendType"] = model.SendType;
			dictParamters["Condition"] = model.Condition;
			dictParamters["SendObject"] = model.SendObject;
			dictParamters["FileName"] = model.FileName;
			dictParamters["FileURL"] = model.FileURL;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BagID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delco_bag(int BagID)
        {
            string sql = "UPDATE co_bag SET Invalid = @Invalid WHERE BagID = @BagID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagID"] = BagID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="BagID">主键Id</param>
        /// <returns></returns>
        public virtual co_bag Getco_bag(int BagID)
        {
            string sql = "select * from co_bag WHERE BagID = @BagID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagID"] = BagID;

            return DBDataSourceHelper.GetSingleOrmData<co_bag>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_bagExt : DAL_co_bag
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_co_bag
    {
        #region 私有变量

        private static DAL_co_bagExt _dal = new DAL_co_bagExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addco_bag(co_bag model)
        {
            return _dal.Addco_bag(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateco_bag(co_bag model)
        {
            return _dal.Updateco_bag(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BagID">主键Id</param>
        /// <returns></returns>
        public bool Delco_bag(int BagID)
        {
            return _dal.Delco_bag(BagID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="BagID">主键Id</param>
        /// <returns></returns>
        public co_bag Getco_bag(int BagID)
        {
            return _dal.Getco_bag(BagID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class co_bagtemp
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public co_bagtemp()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string ID { get; set; }

		/// <summary>
		/// 模板id
		/// </summary>
		public string TempID { get; set; }

		/// <summary>
		/// 券礼包id
		/// </summary>
		public string BagID { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 券礼包中单个券模板领取份数
		/// </summary>
		public int ReceivedNum { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_bagtemp
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addco_bagtemp(co_bagtemp model)
        {
            string sql = @"INSERT INTO co_bagtemp
                                        (TempID,BagID,DateCreated,DateModified,IsDelete,ReceivedNum)
                                    VALUES (@TempID,@BagID,@DateCreated,@DateModified,@IsDelete,@ReceivedNum);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TempID"] = model.TempID;
			dictParamters["BagID"] = model.BagID;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["ReceivedNum"] = model.ReceivedNum;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateco_bagtemp(co_bagtemp model)
        {
            string sql = @"UPDATE co_bagtemp
                                  SET TempID=@TempID,BagID=@BagID,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete,ReceivedNum=@ReceivedNum
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["TempID"] = model.TempID;
			dictParamters["BagID"] = model.BagID;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["ReceivedNum"] = model.ReceivedNum;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delco_bagtemp(int ID)
        {
            string sql = "UPDATE co_bagtemp SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual co_bagtemp Getco_bagtemp(int ID)
        {
            string sql = "select * from co_bagtemp WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<co_bagtemp>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_bagtempExt : DAL_co_bagtemp
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_co_bagtemp
    {
        #region 私有变量

        private static DAL_co_bagtempExt _dal = new DAL_co_bagtempExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addco_bagtemp(co_bagtemp model)
        {
            return _dal.Addco_bagtemp(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateco_bagtemp(co_bagtemp model)
        {
            return _dal.Updateco_bagtemp(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delco_bagtemp(int ID)
        {
            return _dal.Delco_bagtemp(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public co_bagtemp Getco_bagtemp(int ID)
        {
            return _dal.Getco_bagtemp(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class co_baguser
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public co_baguser()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 指定用户表（主要是领券使用）
		/// </summary>
		public string BagUserID { get; set; }

		/// <summary>
		/// 券模板券礼包关联表id
		/// </summary>
		public string BagTempID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 是否领取（发券直接领取，领券默认未领取）
		/// </summary>
		public sbyte IsCollect { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_baguser
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addco_baguser(co_baguser model)
        {
            string sql = @"INSERT INTO co_baguser
                                        (BagTempID,UserID,IsCollect,DateCreated,DateModified,IsDelete)
                                    VALUES (@BagTempID,@UserID,@IsCollect,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagTempID"] = model.BagTempID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["IsCollect"] = model.IsCollect;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateco_baguser(co_baguser model)
        {
            string sql = @"UPDATE co_baguser
                                  SET BagTempID=@BagTempID,UserID=@UserID,IsCollect=@IsCollect,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE BagUserID = @BagUserID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["BagUserID"] = model.BagUserID;
			dictParamters["BagTempID"] = model.BagTempID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["IsCollect"] = model.IsCollect;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BagUserID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delco_baguser(int BagUserID)
        {
            string sql = "UPDATE co_baguser SET Invalid = @Invalid WHERE BagUserID = @BagUserID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagUserID"] = BagUserID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="BagUserID">主键Id</param>
        /// <returns></returns>
        public virtual co_baguser Getco_baguser(int BagUserID)
        {
            string sql = "select * from co_baguser WHERE BagUserID = @BagUserID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagUserID"] = BagUserID;

            return DBDataSourceHelper.GetSingleOrmData<co_baguser>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_baguserExt : DAL_co_baguser
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_co_baguser
    {
        #region 私有变量

        private static DAL_co_baguserExt _dal = new DAL_co_baguserExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addco_baguser(co_baguser model)
        {
            return _dal.Addco_baguser(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateco_baguser(co_baguser model)
        {
            return _dal.Updateco_baguser(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BagUserID">主键Id</param>
        /// <returns></returns>
        public bool Delco_baguser(int BagUserID)
        {
            return _dal.Delco_baguser(BagUserID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="BagUserID">主键Id</param>
        /// <returns></returns>
        public co_baguser Getco_baguser(int BagUserID)
        {
            return _dal.Getco_baguser(BagUserID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class co_template
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public co_template()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// Q202107120001"Q"+"年月日"+"当前模板数"
		/// </summary>
		public string TempID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 基础金额（满）
		/// </summary>
		public decimal BaseAmount { get; set; }

		/// <summary>
		/// 优惠金额（减）
		/// </summary>
		public decimal CouponAmount { get; set; }

		/// <summary>
		/// 有效期类型 0固定 1动态
		/// </summary>
		public int Type { get; set; }

		/// <summary>
		/// 固定 有效期开始时间
		/// </summary>
		public DateTime? BeginTime { get; set; }

		/// <summary>
		/// 固定  有效期结束时间
		/// </summary>
		public DateTime? EndTime { get; set; }

		/// <summary>
		/// 动态  有效天数（领取的时间点开始倒计时计算）
		/// </summary>
		public int? Days { get; set; }

		/// <summary>
		/// 领取平台 0不限 1pc 2app
		/// </summary>
		public int Platform { get; set; }

		/// <summary>
		/// 使用商品模块
		/// </summary>
		public string UsedBusiness { get; set; }

		/// <summary>
		/// 使用说明
		/// </summary>
		public string Explain { get; set; }

		/// <summary>
		/// 备注
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 是否启用
		/// </summary>
		public sbyte IsActive { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_template
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addco_template(co_template model)
        {
            string sql = @"INSERT INTO co_template
                                        (Name,BaseAmount,CouponAmount,Type,BeginTime,EndTime,Days,Platform,UsedBusiness,Explain,Remark,IsActive,DateCreated,DateModified,IsDelete)
                                    VALUES (@Name,@BaseAmount,@CouponAmount,@Type,@BeginTime,@EndTime,@Days,@Platform,@UsedBusiness,@Explain,@Remark,@IsActive,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Name"] = model.Name;
			dictParamters["BaseAmount"] = model.BaseAmount;
			dictParamters["CouponAmount"] = model.CouponAmount;
			dictParamters["Type"] = model.Type;
			dictParamters["BeginTime"] = model.BeginTime;
			dictParamters["EndTime"] = model.EndTime;
			dictParamters["Days"] = model.Days;
			dictParamters["Platform"] = model.Platform;
			dictParamters["UsedBusiness"] = model.UsedBusiness;
			dictParamters["Explain"] = model.Explain;
			dictParamters["Remark"] = model.Remark;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateco_template(co_template model)
        {
            string sql = @"UPDATE co_template
                                  SET Name=@Name,BaseAmount=@BaseAmount,CouponAmount=@CouponAmount,Type=@Type,BeginTime=@BeginTime,EndTime=@EndTime,Days=@Days,Platform=@Platform,UsedBusiness=@UsedBusiness,Explain=@Explain,Remark=@Remark,IsActive=@IsActive,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE TempID = @TempID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["TempID"] = model.TempID;
			dictParamters["Name"] = model.Name;
			dictParamters["BaseAmount"] = model.BaseAmount;
			dictParamters["CouponAmount"] = model.CouponAmount;
			dictParamters["Type"] = model.Type;
			dictParamters["BeginTime"] = model.BeginTime;
			dictParamters["EndTime"] = model.EndTime;
			dictParamters["Days"] = model.Days;
			dictParamters["Platform"] = model.Platform;
			dictParamters["UsedBusiness"] = model.UsedBusiness;
			dictParamters["Explain"] = model.Explain;
			dictParamters["Remark"] = model.Remark;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="TempID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delco_template(int TempID)
        {
            string sql = "UPDATE co_template SET Invalid = @Invalid WHERE TempID = @TempID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TempID"] = TempID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="TempID">主键Id</param>
        /// <returns></returns>
        public virtual co_template Getco_template(int TempID)
        {
            string sql = "select * from co_template WHERE TempID = @TempID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TempID"] = TempID;

            return DBDataSourceHelper.GetSingleOrmData<co_template>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_templateExt : DAL_co_template
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_co_template
    {
        #region 私有变量

        private static DAL_co_templateExt _dal = new DAL_co_templateExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addco_template(co_template model)
        {
            return _dal.Addco_template(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateco_template(co_template model)
        {
            return _dal.Updateco_template(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="TempID">主键Id</param>
        /// <returns></returns>
        public bool Delco_template(int TempID)
        {
            return _dal.Delco_template(TempID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="TempID">主键Id</param>
        /// <returns></returns>
        public co_template Getco_template(int TempID)
        {
            return _dal.Getco_template(TempID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class co_usercoupon
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public co_usercoupon()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 领取记录ID （券码） V202107120001"V"+"年月日"+"当前模板数"
		/// </summary>
		public string CollectID { get; set; }

		/// <summary>
		/// 礼包关联券模板表id
		/// </summary>
		public string BagTempID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 是否使用
		/// </summary>
		public sbyte IsUsed { get; set; }

		/// <summary>
		/// 是否有效
		/// </summary>
		public sbyte IsActive { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateFinish { get; set; }

		/// <summary>
		/// 创建时间 （领取时间）
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_usercoupon
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addco_usercoupon(co_usercoupon model)
        {
            string sql = @"INSERT INTO co_usercoupon
                                        (BagTempID,UserID,IsUsed,IsActive,DateFinish,DateCreated,DateModified,IsDelete)
                                    VALUES (@BagTempID,@UserID,@IsUsed,@IsActive,@DateFinish,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BagTempID"] = model.BagTempID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["IsUsed"] = model.IsUsed;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateFinish"] = model.DateFinish;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateco_usercoupon(co_usercoupon model)
        {
            string sql = @"UPDATE co_usercoupon
                                  SET BagTempID=@BagTempID,UserID=@UserID,IsUsed=@IsUsed,IsActive=@IsActive,DateFinish=@DateFinish,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE CollectID = @CollectID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["CollectID"] = model.CollectID;
			dictParamters["BagTempID"] = model.BagTempID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["IsUsed"] = model.IsUsed;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateFinish"] = model.DateFinish;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="CollectID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delco_usercoupon(int CollectID)
        {
            string sql = "UPDATE co_usercoupon SET Invalid = @Invalid WHERE CollectID = @CollectID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CollectID"] = CollectID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="CollectID">主键Id</param>
        /// <returns></returns>
        public virtual co_usercoupon Getco_usercoupon(int CollectID)
        {
            string sql = "select * from co_usercoupon WHERE CollectID = @CollectID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CollectID"] = CollectID;

            return DBDataSourceHelper.GetSingleOrmData<co_usercoupon>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_usercouponExt : DAL_co_usercoupon
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_co_usercoupon
    {
        #region 私有变量

        private static DAL_co_usercouponExt _dal = new DAL_co_usercouponExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addco_usercoupon(co_usercoupon model)
        {
            return _dal.Addco_usercoupon(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateco_usercoupon(co_usercoupon model)
        {
            return _dal.Updateco_usercoupon(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="CollectID">主键Id</param>
        /// <returns></returns>
        public bool Delco_usercoupon(int CollectID)
        {
            return _dal.Delco_usercoupon(CollectID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="CollectID">主键Id</param>
        /// <returns></returns>
        public co_usercoupon Getco_usercoupon(int CollectID)
        {
            return _dal.Getco_usercoupon(CollectID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class co_usercouponlog
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public co_usercouponlog()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string LogID { get; set; }

		/// <summary>
		/// 领取记录表id
		/// </summary>
		public string CollectID { get; set; }

		/// <summary>
		/// 使用订单的编号
		/// </summary>
		public string OrderNumber { get; set; }

		/// <summary>
		/// 使用平台（所属类型如社保代缴）
		/// </summary>
		public string Platform { get; set; }

		/// <summary>
		/// 创建时间 （使用时间）
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_usercouponlog
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addco_usercouponlog(co_usercouponlog model)
        {
            string sql = @"INSERT INTO co_usercouponlog
                                        (CollectID,OrderNumber,Platform,DateCreated,DateModified,IsDelete)
                                    VALUES (@CollectID,@OrderNumber,@Platform,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CollectID"] = model.CollectID;
			dictParamters["OrderNumber"] = model.OrderNumber;
			dictParamters["Platform"] = model.Platform;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateco_usercouponlog(co_usercouponlog model)
        {
            string sql = @"UPDATE co_usercouponlog
                                  SET CollectID=@CollectID,OrderNumber=@OrderNumber,Platform=@Platform,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE LogID = @LogID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["LogID"] = model.LogID;
			dictParamters["CollectID"] = model.CollectID;
			dictParamters["OrderNumber"] = model.OrderNumber;
			dictParamters["Platform"] = model.Platform;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="LogID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delco_usercouponlog(int LogID)
        {
            string sql = "UPDATE co_usercouponlog SET Invalid = @Invalid WHERE LogID = @LogID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["LogID"] = LogID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="LogID">主键Id</param>
        /// <returns></returns>
        public virtual co_usercouponlog Getco_usercouponlog(int LogID)
        {
            string sql = "select * from co_usercouponlog WHERE LogID = @LogID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["LogID"] = LogID;

            return DBDataSourceHelper.GetSingleOrmData<co_usercouponlog>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_co_usercouponlogExt : DAL_co_usercouponlog
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_co_usercouponlog
    {
        #region 私有变量

        private static DAL_co_usercouponlogExt _dal = new DAL_co_usercouponlogExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addco_usercouponlog(co_usercouponlog model)
        {
            return _dal.Addco_usercouponlog(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateco_usercouponlog(co_usercouponlog model)
        {
            return _dal.Updateco_usercouponlog(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="LogID">主键Id</param>
        /// <returns></returns>
        public bool Delco_usercouponlog(int LogID)
        {
            return _dal.Delco_usercouponlog(LogID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="LogID">主键Id</param>
        /// <returns></returns>
        public co_usercouponlog Getco_usercouponlog(int LogID)
        {
            return _dal.Getco_usercouponlog(LogID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class companycode
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public companycode()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int RowID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CompanyGuid { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CompanyName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CompanyCodes { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal Discount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int IsEnable { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int IsDelete { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Operator { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateStart { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateEnd { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? DateUpdate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? UserCount { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_companycode
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addcompanycode(companycode model)
        {
            string sql = @"INSERT INTO companycode
                                        (CompanyGuid,CompanyName,CompanyCodes,Discount,IsEnable,IsDelete,Operator,DateStart,DateEnd,DateCreate,DateUpdate,UserCount)
                                    VALUES (@CompanyGuid,@CompanyName,@CompanyCodes,@Discount,@IsEnable,@IsDelete,@Operator,@DateStart,@DateEnd,@DateCreate,@DateUpdate,@UserCount);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CompanyGuid"] = model.CompanyGuid;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["CompanyCodes"] = model.CompanyCodes;
			dictParamters["Discount"] = model.Discount;
			dictParamters["IsEnable"] = model.IsEnable;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["Operator"] = model.Operator;
			dictParamters["DateStart"] = model.DateStart;
			dictParamters["DateEnd"] = model.DateEnd;
			dictParamters["DateCreate"] = model.DateCreate;
			dictParamters["DateUpdate"] = model.DateUpdate;
			dictParamters["UserCount"] = model.UserCount;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatecompanycode(companycode model)
        {
            string sql = @"UPDATE companycode
                                  SET CompanyGuid=@CompanyGuid,CompanyName=@CompanyName,CompanyCodes=@CompanyCodes,Discount=@Discount,IsEnable=@IsEnable,IsDelete=@IsDelete,Operator=@Operator,DateStart=@DateStart,DateEnd=@DateEnd,DateCreate=@DateCreate,DateUpdate=@DateUpdate,UserCount=@UserCount
                                WHERE RowID = @RowID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["RowID"] = model.RowID;
			dictParamters["CompanyGuid"] = model.CompanyGuid;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["CompanyCodes"] = model.CompanyCodes;
			dictParamters["Discount"] = model.Discount;
			dictParamters["IsEnable"] = model.IsEnable;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["Operator"] = model.Operator;
			dictParamters["DateStart"] = model.DateStart;
			dictParamters["DateEnd"] = model.DateEnd;
			dictParamters["DateCreate"] = model.DateCreate;
			dictParamters["DateUpdate"] = model.DateUpdate;
			dictParamters["UserCount"] = model.UserCount;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delcompanycode(int RowID)
        {
            string sql = "UPDATE companycode SET Invalid = @Invalid WHERE RowID = @RowID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual companycode Getcompanycode(int RowID)
        {
            string sql = "select * from companycode WHERE RowID = @RowID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;

            return DBDataSourceHelper.GetSingleOrmData<companycode>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_companycodeExt : DAL_companycode
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_companycode
    {
        #region 私有变量

        private static DAL_companycodeExt _dal = new DAL_companycodeExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addcompanycode(companycode model)
        {
            return _dal.Addcompanycode(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatecompanycode(companycode model)
        {
            return _dal.Updatecompanycode(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public bool Delcompanycode(int RowID)
        {
            return _dal.Delcompanycode(RowID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public companycode Getcompanycode(int RowID)
        {
            return _dal.Getcompanycode(RowID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class costcenter
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public costcenter()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 成本中心编号
		/// </summary>
		public string CostCenterNo { get; set; }

		/// <summary>
		/// 城市
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 是否默认
		/// </summary>
		public sbyte IsDefault { get; set; }

		/// <summary>
		/// 社保增员截止日
		/// </summary>
		public string SocialAddDeadLine { get; set; }

		/// <summary>
		/// 社保减员截止日
		/// </summary>
		public string SocialReduceDeadLine { get; set; }

		/// <summary>
		/// 公积金增员截止日
		/// </summary>
		public string AccumulationAddDeadLine { get; set; }

		/// <summary>
		/// 公积金减员截止日
		/// </summary>
		public string AccumulationReduceDeadLine { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte IsEnabled { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 更新时间
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ChangeDescription { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_costcenter
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addcostcenter(costcenter model)
        {
            string sql = @"INSERT INTO costcenter
                                        (City,IsDefault,SocialAddDeadLine,SocialReduceDeadLine,AccumulationAddDeadLine,AccumulationReduceDeadLine,IsEnabled,ChangeDescription)
                                    VALUES (@City,@IsDefault,@SocialAddDeadLine,@SocialReduceDeadLine,@AccumulationAddDeadLine,@AccumulationReduceDeadLine,@IsEnabled,@ChangeDescription);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["City"] = model.City;
			dictParamters["IsDefault"] = model.IsDefault;
			dictParamters["SocialAddDeadLine"] = model.SocialAddDeadLine;
			dictParamters["SocialReduceDeadLine"] = model.SocialReduceDeadLine;
			dictParamters["AccumulationAddDeadLine"] = model.AccumulationAddDeadLine;
			dictParamters["AccumulationReduceDeadLine"] = model.AccumulationReduceDeadLine;
			dictParamters["IsEnabled"] = model.IsEnabled;
			dictParamters["ChangeDescription"] = model.ChangeDescription;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatecostcenter(costcenter model)
        {
            string sql = @"UPDATE costcenter
                                  SET City=@City,IsDefault=@IsDefault,SocialAddDeadLine=@SocialAddDeadLine,SocialReduceDeadLine=@SocialReduceDeadLine,AccumulationAddDeadLine=@AccumulationAddDeadLine,AccumulationReduceDeadLine=@AccumulationReduceDeadLine,IsEnabled=@IsEnabled,ChangeDescription=@ChangeDescription
                                WHERE CostCenterNo = @CostCenterNo;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["CostCenterNo"] = model.CostCenterNo;
			dictParamters["City"] = model.City;
			dictParamters["IsDefault"] = model.IsDefault;
			dictParamters["SocialAddDeadLine"] = model.SocialAddDeadLine;
			dictParamters["SocialReduceDeadLine"] = model.SocialReduceDeadLine;
			dictParamters["AccumulationAddDeadLine"] = model.AccumulationAddDeadLine;
			dictParamters["AccumulationReduceDeadLine"] = model.AccumulationReduceDeadLine;
			dictParamters["IsEnabled"] = model.IsEnabled;
			dictParamters["ChangeDescription"] = model.ChangeDescription;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="CostCenterNo">主键Id</param>
        /// <returns></returns>
        public virtual bool Delcostcenter(int CostCenterNo)
        {
            string sql = "UPDATE costcenter SET Invalid = @Invalid WHERE CostCenterNo = @CostCenterNo";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CostCenterNo"] = CostCenterNo;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="CostCenterNo">主键Id</param>
        /// <returns></returns>
        public virtual costcenter Getcostcenter(int CostCenterNo)
        {
            string sql = "select * from costcenter WHERE CostCenterNo = @CostCenterNo";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CostCenterNo"] = CostCenterNo;

            return DBDataSourceHelper.GetSingleOrmData<costcenter>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_costcenterExt : DAL_costcenter
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_costcenter
    {
        #region 私有变量

        private static DAL_costcenterExt _dal = new DAL_costcenterExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addcostcenter(costcenter model)
        {
            return _dal.Addcostcenter(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatecostcenter(costcenter model)
        {
            return _dal.Updatecostcenter(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="CostCenterNo">主键Id</param>
        /// <returns></returns>
        public bool Delcostcenter(int CostCenterNo)
        {
            return _dal.Delcostcenter(CostCenterNo);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="CostCenterNo">主键Id</param>
        /// <returns></returns>
        public costcenter Getcostcenter(int CostCenterNo)
        {
            return _dal.Getcostcenter(CostCenterNo);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class cu_contacts
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public cu_contacts()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string ContactId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Contact { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Province { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string District { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Address { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte IsDefault { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_cu_contacts
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addcu_contacts(cu_contacts model)
        {
            string sql = @"INSERT INTO cu_contacts
                                        (UserId,Contact,Mobile,Email,Province,City,District,Address,IsDefault,DateCreated,DateModified,IsDelete)
                                    VALUES (@UserId,@Contact,@Mobile,@Email,@Province,@City,@District,@Address,@IsDefault,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserId"] = model.UserId;
			dictParamters["Contact"] = model.Contact;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Email"] = model.Email;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["District"] = model.District;
			dictParamters["Address"] = model.Address;
			dictParamters["IsDefault"] = model.IsDefault;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatecu_contacts(cu_contacts model)
        {
            string sql = @"UPDATE cu_contacts
                                  SET UserId=@UserId,Contact=@Contact,Mobile=@Mobile,Email=@Email,Province=@Province,City=@City,District=@District,Address=@Address,IsDefault=@IsDefault,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE ContactId = @ContactId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ContactId"] = model.ContactId;
			dictParamters["UserId"] = model.UserId;
			dictParamters["Contact"] = model.Contact;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Email"] = model.Email;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["District"] = model.District;
			dictParamters["Address"] = model.Address;
			dictParamters["IsDefault"] = model.IsDefault;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ContactId">主键Id</param>
        /// <returns></returns>
        public virtual bool Delcu_contacts(int ContactId)
        {
            string sql = "UPDATE cu_contacts SET Invalid = @Invalid WHERE ContactId = @ContactId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ContactId"] = ContactId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ContactId">主键Id</param>
        /// <returns></returns>
        public virtual cu_contacts Getcu_contacts(int ContactId)
        {
            string sql = "select * from cu_contacts WHERE ContactId = @ContactId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ContactId"] = ContactId;

            return DBDataSourceHelper.GetSingleOrmData<cu_contacts>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_cu_contactsExt : DAL_cu_contacts
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_cu_contacts
    {
        #region 私有变量

        private static DAL_cu_contactsExt _dal = new DAL_cu_contactsExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addcu_contacts(cu_contacts model)
        {
            return _dal.Addcu_contacts(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatecu_contacts(cu_contacts model)
        {
            return _dal.Updatecu_contacts(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ContactId">主键Id</param>
        /// <returns></returns>
        public bool Delcu_contacts(int ContactId)
        {
            return _dal.Delcu_contacts(ContactId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ContactId">主键Id</param>
        /// <returns></returns>
        public cu_contacts Getcu_contacts(int ContactId)
        {
            return _dal.Getcu_contacts(ContactId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class employee
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public employee()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string EmployeeId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmployeeName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IDCardType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IDCardNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmployeeSex { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? EmployeeBirth { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MaritalStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Nation { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string PoliticalAppearance { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string NativePlace { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Education { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Phone { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string NowAddress { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmergencyContact { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmergencyContactRelationship { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmergencyContactWay { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? EntryDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? LeaveDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmployeeType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EmployeeStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? CorrectionDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string WorkCity { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string DepartMent { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Post { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string JobNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IncumbencyStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string BankAccount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string WageCardNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OpeningBank { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OpeningProvince { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OpeningCity { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SocialSecuirtyComputerNo { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string GJJCardNo { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HouseholdRegisterType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HouseholdRegisterAddress { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EnclosureUrl { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string AddUserId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UpdateUserId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? AddDateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string LeaveType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_employee
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addemployee(employee model)
        {
            string sql = @"INSERT INTO employee
                                        (EmployeeName,IDCardType,IDCardNumber,EmployeeSex,EmployeeBirth,MaritalStatus,Nation,PoliticalAppearance,NativePlace,Education,Phone,Email,NowAddress,EmergencyContact,EmergencyContactRelationship,EmergencyContactWay,EntryDate,LeaveDate,EmployeeType,EmployeeStatus,CorrectionDate,WorkCity,DepartMent,Post,JobNumber,IncumbencyStatus,BankAccount,WageCardNumber,OpeningBank,OpeningProvince,OpeningCity,SocialSecuirtyComputerNo,GJJCardNo,HouseholdRegisterType,HouseholdRegisterAddress,EnclosureUrl,AddUserId,UpdateUserId,AddDateTime,LeaveType,UserID)
                                    VALUES (@EmployeeName,@IDCardType,@IDCardNumber,@EmployeeSex,@EmployeeBirth,@MaritalStatus,@Nation,@PoliticalAppearance,@NativePlace,@Education,@Phone,@Email,@NowAddress,@EmergencyContact,@EmergencyContactRelationship,@EmergencyContactWay,@EntryDate,@LeaveDate,@EmployeeType,@EmployeeStatus,@CorrectionDate,@WorkCity,@DepartMent,@Post,@JobNumber,@IncumbencyStatus,@BankAccount,@WageCardNumber,@OpeningBank,@OpeningProvince,@OpeningCity,@SocialSecuirtyComputerNo,@GJJCardNo,@HouseholdRegisterType,@HouseholdRegisterAddress,@EnclosureUrl,@AddUserId,@UpdateUserId,@AddDateTime,@LeaveType,@UserID);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["EmployeeName"] = model.EmployeeName;
			dictParamters["IDCardType"] = model.IDCardType;
			dictParamters["IDCardNumber"] = model.IDCardNumber;
			dictParamters["EmployeeSex"] = model.EmployeeSex;
			dictParamters["EmployeeBirth"] = model.EmployeeBirth;
			dictParamters["MaritalStatus"] = model.MaritalStatus;
			dictParamters["Nation"] = model.Nation;
			dictParamters["PoliticalAppearance"] = model.PoliticalAppearance;
			dictParamters["NativePlace"] = model.NativePlace;
			dictParamters["Education"] = model.Education;
			dictParamters["Phone"] = model.Phone;
			dictParamters["Email"] = model.Email;
			dictParamters["NowAddress"] = model.NowAddress;
			dictParamters["EmergencyContact"] = model.EmergencyContact;
			dictParamters["EmergencyContactRelationship"] = model.EmergencyContactRelationship;
			dictParamters["EmergencyContactWay"] = model.EmergencyContactWay;
			dictParamters["EntryDate"] = model.EntryDate;
			dictParamters["LeaveDate"] = model.LeaveDate;
			dictParamters["EmployeeType"] = model.EmployeeType;
			dictParamters["EmployeeStatus"] = model.EmployeeStatus;
			dictParamters["CorrectionDate"] = model.CorrectionDate;
			dictParamters["WorkCity"] = model.WorkCity;
			dictParamters["DepartMent"] = model.DepartMent;
			dictParamters["Post"] = model.Post;
			dictParamters["JobNumber"] = model.JobNumber;
			dictParamters["IncumbencyStatus"] = model.IncumbencyStatus;
			dictParamters["BankAccount"] = model.BankAccount;
			dictParamters["WageCardNumber"] = model.WageCardNumber;
			dictParamters["OpeningBank"] = model.OpeningBank;
			dictParamters["OpeningProvince"] = model.OpeningProvince;
			dictParamters["OpeningCity"] = model.OpeningCity;
			dictParamters["SocialSecuirtyComputerNo"] = model.SocialSecuirtyComputerNo;
			dictParamters["GJJCardNo"] = model.GJJCardNo;
			dictParamters["HouseholdRegisterType"] = model.HouseholdRegisterType;
			dictParamters["HouseholdRegisterAddress"] = model.HouseholdRegisterAddress;
			dictParamters["EnclosureUrl"] = model.EnclosureUrl;
			dictParamters["AddUserId"] = model.AddUserId;
			dictParamters["UpdateUserId"] = model.UpdateUserId;
			dictParamters["AddDateTime"] = model.AddDateTime;
			dictParamters["LeaveType"] = model.LeaveType;
			dictParamters["UserID"] = model.UserID;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateemployee(employee model)
        {
            string sql = @"UPDATE employee
                                  SET EmployeeName=@EmployeeName,IDCardType=@IDCardType,IDCardNumber=@IDCardNumber,EmployeeSex=@EmployeeSex,EmployeeBirth=@EmployeeBirth,MaritalStatus=@MaritalStatus,Nation=@Nation,PoliticalAppearance=@PoliticalAppearance,NativePlace=@NativePlace,Education=@Education,Phone=@Phone,Email=@Email,NowAddress=@NowAddress,EmergencyContact=@EmergencyContact,EmergencyContactRelationship=@EmergencyContactRelationship,EmergencyContactWay=@EmergencyContactWay,EntryDate=@EntryDate,LeaveDate=@LeaveDate,EmployeeType=@EmployeeType,EmployeeStatus=@EmployeeStatus,CorrectionDate=@CorrectionDate,WorkCity=@WorkCity,DepartMent=@DepartMent,Post=@Post,JobNumber=@JobNumber,IncumbencyStatus=@IncumbencyStatus,BankAccount=@BankAccount,WageCardNumber=@WageCardNumber,OpeningBank=@OpeningBank,OpeningProvince=@OpeningProvince,OpeningCity=@OpeningCity,SocialSecuirtyComputerNo=@SocialSecuirtyComputerNo,GJJCardNo=@GJJCardNo,HouseholdRegisterType=@HouseholdRegisterType,HouseholdRegisterAddress=@HouseholdRegisterAddress,EnclosureUrl=@EnclosureUrl,AddUserId=@AddUserId,UpdateUserId=@UpdateUserId,AddDateTime=@AddDateTime,LeaveType=@LeaveType,UserID=@UserID
                                WHERE EmployeeId = @EmployeeId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["EmployeeId"] = model.EmployeeId;
			dictParamters["EmployeeName"] = model.EmployeeName;
			dictParamters["IDCardType"] = model.IDCardType;
			dictParamters["IDCardNumber"] = model.IDCardNumber;
			dictParamters["EmployeeSex"] = model.EmployeeSex;
			dictParamters["EmployeeBirth"] = model.EmployeeBirth;
			dictParamters["MaritalStatus"] = model.MaritalStatus;
			dictParamters["Nation"] = model.Nation;
			dictParamters["PoliticalAppearance"] = model.PoliticalAppearance;
			dictParamters["NativePlace"] = model.NativePlace;
			dictParamters["Education"] = model.Education;
			dictParamters["Phone"] = model.Phone;
			dictParamters["Email"] = model.Email;
			dictParamters["NowAddress"] = model.NowAddress;
			dictParamters["EmergencyContact"] = model.EmergencyContact;
			dictParamters["EmergencyContactRelationship"] = model.EmergencyContactRelationship;
			dictParamters["EmergencyContactWay"] = model.EmergencyContactWay;
			dictParamters["EntryDate"] = model.EntryDate;
			dictParamters["LeaveDate"] = model.LeaveDate;
			dictParamters["EmployeeType"] = model.EmployeeType;
			dictParamters["EmployeeStatus"] = model.EmployeeStatus;
			dictParamters["CorrectionDate"] = model.CorrectionDate;
			dictParamters["WorkCity"] = model.WorkCity;
			dictParamters["DepartMent"] = model.DepartMent;
			dictParamters["Post"] = model.Post;
			dictParamters["JobNumber"] = model.JobNumber;
			dictParamters["IncumbencyStatus"] = model.IncumbencyStatus;
			dictParamters["BankAccount"] = model.BankAccount;
			dictParamters["WageCardNumber"] = model.WageCardNumber;
			dictParamters["OpeningBank"] = model.OpeningBank;
			dictParamters["OpeningProvince"] = model.OpeningProvince;
			dictParamters["OpeningCity"] = model.OpeningCity;
			dictParamters["SocialSecuirtyComputerNo"] = model.SocialSecuirtyComputerNo;
			dictParamters["GJJCardNo"] = model.GJJCardNo;
			dictParamters["HouseholdRegisterType"] = model.HouseholdRegisterType;
			dictParamters["HouseholdRegisterAddress"] = model.HouseholdRegisterAddress;
			dictParamters["EnclosureUrl"] = model.EnclosureUrl;
			dictParamters["AddUserId"] = model.AddUserId;
			dictParamters["UpdateUserId"] = model.UpdateUserId;
			dictParamters["AddDateTime"] = model.AddDateTime;
			dictParamters["LeaveType"] = model.LeaveType;
			dictParamters["UserID"] = model.UserID;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="EmployeeId">主键Id</param>
        /// <returns></returns>
        public virtual bool Delemployee(int EmployeeId)
        {
            string sql = "UPDATE employee SET Invalid = @Invalid WHERE EmployeeId = @EmployeeId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["EmployeeId"] = EmployeeId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="EmployeeId">主键Id</param>
        /// <returns></returns>
        public virtual employee Getemployee(int EmployeeId)
        {
            string sql = "select * from employee WHERE EmployeeId = @EmployeeId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["EmployeeId"] = EmployeeId;

            return DBDataSourceHelper.GetSingleOrmData<employee>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_employeeExt : DAL_employee
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_employee
    {
        #region 私有变量

        private static DAL_employeeExt _dal = new DAL_employeeExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addemployee(employee model)
        {
            return _dal.Addemployee(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateemployee(employee model)
        {
            return _dal.Updateemployee(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="EmployeeId">主键Id</param>
        /// <returns></returns>
        public bool Delemployee(int EmployeeId)
        {
            return _dal.Delemployee(EmployeeId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="EmployeeId">主键Id</param>
        /// <returns></returns>
        public employee Getemployee(int EmployeeId)
        {
            return _dal.Getemployee(EmployeeId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class entservicepaydetail
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public entservicepaydetail()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CityName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime PayMonth { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int InsureCount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal ServiceFee { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte Cancel { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? UpdateTime { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_entservicepaydetail
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addentservicepaydetail(entservicepaydetail model)
        {
            string sql = @"INSERT INTO entservicepaydetail
                                        (OrderID,UserID,CityName,PayMonth,InsureCount,ServiceFee,Cancel)
                                    VALUES (@OrderID,@UserID,@CityName,@PayMonth,@InsureCount,@ServiceFee,@Cancel);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["OrderID"] = model.OrderID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["CityName"] = model.CityName;
			dictParamters["PayMonth"] = model.PayMonth;
			dictParamters["InsureCount"] = model.InsureCount;
			dictParamters["ServiceFee"] = model.ServiceFee;
			dictParamters["Cancel"] = model.Cancel;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateentservicepaydetail(entservicepaydetail model)
        {
            string sql = @"UPDATE entservicepaydetail
                                  SET OrderID=@OrderID,UserID=@UserID,CityName=@CityName,PayMonth=@PayMonth,InsureCount=@InsureCount,ServiceFee=@ServiceFee,Cancel=@Cancel
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["OrderID"] = model.OrderID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["CityName"] = model.CityName;
			dictParamters["PayMonth"] = model.PayMonth;
			dictParamters["InsureCount"] = model.InsureCount;
			dictParamters["ServiceFee"] = model.ServiceFee;
			dictParamters["Cancel"] = model.Cancel;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delentservicepaydetail(int Id)
        {
            string sql = "UPDATE entservicepaydetail SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual entservicepaydetail Getentservicepaydetail(int Id)
        {
            string sql = "select * from entservicepaydetail WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<entservicepaydetail>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_entservicepaydetailExt : DAL_entservicepaydetail
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_entservicepaydetail
    {
        #region 私有变量

        private static DAL_entservicepaydetailExt _dal = new DAL_entservicepaydetailExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addentservicepaydetail(entservicepaydetail model)
        {
            return _dal.Addentservicepaydetail(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateentservicepaydetail(entservicepaydetail model)
        {
            return _dal.Updateentservicepaydetail(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Delentservicepaydetail(int Id)
        {
            return _dal.Delentservicepaydetail(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public entservicepaydetail Getentservicepaydetail(int Id)
        {
            return _dal.Getentservicepaydetail(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class enumconfig
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public enumconfig()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EnumName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string EnumValue { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? ParentID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int IsEnabled { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int OrderID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime CreateDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? UpdateDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Remark { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_enumconfig
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addenumconfig(enumconfig model)
        {
            string sql = @"INSERT INTO enumconfig
                                        (EnumName,EnumValue,ParentID,IsEnabled,OrderID,CreateDate,UpdateDate,Remark)
                                    VALUES (@EnumName,@EnumValue,@ParentID,@IsEnabled,@OrderID,@CreateDate,@UpdateDate,@Remark);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["EnumName"] = model.EnumName;
			dictParamters["EnumValue"] = model.EnumValue;
			dictParamters["ParentID"] = model.ParentID;
			dictParamters["IsEnabled"] = model.IsEnabled;
			dictParamters["OrderID"] = model.OrderID;
			dictParamters["CreateDate"] = model.CreateDate;
			dictParamters["UpdateDate"] = model.UpdateDate;
			dictParamters["Remark"] = model.Remark;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateenumconfig(enumconfig model)
        {
            string sql = @"UPDATE enumconfig
                                  SET EnumName=@EnumName,EnumValue=@EnumValue,ParentID=@ParentID,IsEnabled=@IsEnabled,OrderID=@OrderID,CreateDate=@CreateDate,UpdateDate=@UpdateDate,Remark=@Remark
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["EnumName"] = model.EnumName;
			dictParamters["EnumValue"] = model.EnumValue;
			dictParamters["ParentID"] = model.ParentID;
			dictParamters["IsEnabled"] = model.IsEnabled;
			dictParamters["OrderID"] = model.OrderID;
			dictParamters["CreateDate"] = model.CreateDate;
			dictParamters["UpdateDate"] = model.UpdateDate;
			dictParamters["Remark"] = model.Remark;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delenumconfig(int ID)
        {
            string sql = "UPDATE enumconfig SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual enumconfig Getenumconfig(int ID)
        {
            string sql = "select * from enumconfig WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<enumconfig>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_enumconfigExt : DAL_enumconfig
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_enumconfig
    {
        #region 私有变量

        private static DAL_enumconfigExt _dal = new DAL_enumconfigExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addenumconfig(enumconfig model)
        {
            return _dal.Addenumconfig(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateenumconfig(enumconfig model)
        {
            return _dal.Updateenumconfig(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delenumconfig(int ID)
        {
            return _dal.Delenumconfig(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public enumconfig Getenumconfig(int ID)
        {
            return _dal.Getenumconfig(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_emailsend
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_emailsend()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 发送ID
		/// </summary>
		public string SendId { get; set; }

		/// <summary>
		/// 任务ID
		/// </summary>
		public string TaskId { get; set; }

		/// <summary>
		/// 模板ID
		/// </summary>
		public string TempId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MemberId { get; set; }

		/// <summary>
		/// 收件人邮箱
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 邮件内容
		/// </summary>
		public string Content { get; set; }

		/// <summary>
		/// 发送说明
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// 状态 0：未提交 1：已提交 2：发送成功 3：发送失败
		/// </summary>
		public int Status { get; set; }

		/// <summary>
		/// 发送说明
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string RequestId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_emailsend
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_emailsend(es_emailsend model)
        {
            string sql = @"INSERT INTO es_emailsend
                                        (TaskId,TempId,MemberId,Email,Content,UserId,Status,Remark,DateCreated,DateModified,IsDelete,RequestId)
                                    VALUES (@TaskId,@TempId,@MemberId,@Email,@Content,@UserId,@Status,@Remark,@DateCreated,@DateModified,@IsDelete,@RequestId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TaskId"] = model.TaskId;
			dictParamters["TempId"] = model.TempId;
			dictParamters["MemberId"] = model.MemberId;
			dictParamters["Email"] = model.Email;
			dictParamters["Content"] = model.Content;
			dictParamters["UserId"] = model.UserId;
			dictParamters["Status"] = model.Status;
			dictParamters["Remark"] = model.Remark;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["RequestId"] = model.RequestId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_emailsend(es_emailsend model)
        {
            string sql = @"UPDATE es_emailsend
                                  SET TaskId=@TaskId,TempId=@TempId,MemberId=@MemberId,Email=@Email,Content=@Content,UserId=@UserId,Status=@Status,Remark=@Remark,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete,RequestId=@RequestId
                                WHERE SendId = @SendId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["SendId"] = model.SendId;
			dictParamters["TaskId"] = model.TaskId;
			dictParamters["TempId"] = model.TempId;
			dictParamters["MemberId"] = model.MemberId;
			dictParamters["Email"] = model.Email;
			dictParamters["Content"] = model.Content;
			dictParamters["UserId"] = model.UserId;
			dictParamters["Status"] = model.Status;
			dictParamters["Remark"] = model.Remark;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["RequestId"] = model.RequestId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_emailsend(int SendId)
        {
            string sql = "UPDATE es_emailsend SET Invalid = @Invalid WHERE SendId = @SendId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SendId"] = SendId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public virtual es_emailsend Getes_emailsend(int SendId)
        {
            string sql = "select * from es_emailsend WHERE SendId = @SendId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SendId"] = SendId;

            return DBDataSourceHelper.GetSingleOrmData<es_emailsend>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_emailsendExt : DAL_es_emailsend
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_emailsend
    {
        #region 私有变量

        private static DAL_es_emailsendExt _dal = new DAL_es_emailsendExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_emailsend(es_emailsend model)
        {
            return _dal.Addes_emailsend(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_emailsend(es_emailsend model)
        {
            return _dal.Updatees_emailsend(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public bool Deles_emailsend(int SendId)
        {
            return _dal.Deles_emailsend(SendId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public es_emailsend Getes_emailsend(int SendId)
        {
            return _dal.Getes_emailsend(SendId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_emailtest
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_emailtest()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 发送ID
		/// </summary>
		public string SendId { get; set; }

		/// <summary>
		/// 任务ID
		/// </summary>
		public string TaskId { get; set; }

		/// <summary>
		/// 模板ID
		/// </summary>
		public string TempId { get; set; }

		/// <summary>
		/// 邮件内容
		/// </summary>
		public string Content { get; set; }

		/// <summary>
		/// 主题
		/// </summary>
		public string Subject { get; set; }

		/// <summary>
		/// 简介
		/// </summary>
		public string Abstract { get; set; }

		/// <summary>
		/// 发件地址
		/// </summary>
		public string SendAddress { get; set; }

		/// <summary>
		/// 发件人
		/// </summary>
		public string Sender { get; set; }

		/// <summary>
		/// 收件人邮箱
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 客户Id
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? SendTime { get; set; }

		/// <summary>
		/// 状态 0：未提交 1：已提交 2：发送成功 3：发送失败
		/// </summary>
		public int Status { get; set; }

		/// <summary>
		/// 发送说明
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 发送请求Id
		/// </summary>
		public string RequestId { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_emailtest
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_emailtest(es_emailtest model)
        {
            string sql = @"INSERT INTO es_emailtest
                                        (TaskId,TempId,Content,Subject,Abstract,SendAddress,Sender,Email,UserId,SendTime,Status,Remark,RequestId,DateCreated,DateModified,IsDelete)
                                    VALUES (@TaskId,@TempId,@Content,@Subject,@Abstract,@SendAddress,@Sender,@Email,@UserId,@SendTime,@Status,@Remark,@RequestId,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TaskId"] = model.TaskId;
			dictParamters["TempId"] = model.TempId;
			dictParamters["Content"] = model.Content;
			dictParamters["Subject"] = model.Subject;
			dictParamters["Abstract"] = model.Abstract;
			dictParamters["SendAddress"] = model.SendAddress;
			dictParamters["Sender"] = model.Sender;
			dictParamters["Email"] = model.Email;
			dictParamters["UserId"] = model.UserId;
			dictParamters["SendTime"] = model.SendTime;
			dictParamters["Status"] = model.Status;
			dictParamters["Remark"] = model.Remark;
			dictParamters["RequestId"] = model.RequestId;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_emailtest(es_emailtest model)
        {
            string sql = @"UPDATE es_emailtest
                                  SET TaskId=@TaskId,TempId=@TempId,Content=@Content,Subject=@Subject,Abstract=@Abstract,SendAddress=@SendAddress,Sender=@Sender,Email=@Email,UserId=@UserId,SendTime=@SendTime,Status=@Status,Remark=@Remark,RequestId=@RequestId,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE SendId = @SendId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["SendId"] = model.SendId;
			dictParamters["TaskId"] = model.TaskId;
			dictParamters["TempId"] = model.TempId;
			dictParamters["Content"] = model.Content;
			dictParamters["Subject"] = model.Subject;
			dictParamters["Abstract"] = model.Abstract;
			dictParamters["SendAddress"] = model.SendAddress;
			dictParamters["Sender"] = model.Sender;
			dictParamters["Email"] = model.Email;
			dictParamters["UserId"] = model.UserId;
			dictParamters["SendTime"] = model.SendTime;
			dictParamters["Status"] = model.Status;
			dictParamters["Remark"] = model.Remark;
			dictParamters["RequestId"] = model.RequestId;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_emailtest(int SendId)
        {
            string sql = "UPDATE es_emailtest SET Invalid = @Invalid WHERE SendId = @SendId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SendId"] = SendId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public virtual es_emailtest Getes_emailtest(int SendId)
        {
            string sql = "select * from es_emailtest WHERE SendId = @SendId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SendId"] = SendId;

            return DBDataSourceHelper.GetSingleOrmData<es_emailtest>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_emailtestExt : DAL_es_emailtest
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_emailtest
    {
        #region 私有变量

        private static DAL_es_emailtestExt _dal = new DAL_es_emailtestExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_emailtest(es_emailtest model)
        {
            return _dal.Addes_emailtest(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_emailtest(es_emailtest model)
        {
            return _dal.Updatees_emailtest(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public bool Deles_emailtest(int SendId)
        {
            return _dal.Deles_emailtest(SendId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="SendId">主键Id</param>
        /// <returns></returns>
        public es_emailtest Getes_emailtest(int SendId)
        {
            return _dal.Getes_emailtest(SendId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_group
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_group()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 群组ID
		/// </summary>
		public string GroupId { get; set; }

		/// <summary>
		/// 群组名称
		/// </summary>
		public string GroupName { get; set; }

		/// <summary>
		/// 群组类型
		/// </summary>
		public string GroupType { get; set; }

		/// <summary>
		/// 所属用户ID
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// 是否有效 0：无效 1：有效
		/// </summary>
		public sbyte IsActive { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_group
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_group(es_group model)
        {
            string sql = @"INSERT INTO es_group
                                        (GroupName,GroupType,UserId,IsActive,DateCreated,DateModified,IsDelete)
                                    VALUES (@GroupName,@GroupType,@UserId,@IsActive,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["GroupName"] = model.GroupName;
			dictParamters["GroupType"] = model.GroupType;
			dictParamters["UserId"] = model.UserId;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_group(es_group model)
        {
            string sql = @"UPDATE es_group
                                  SET GroupName=@GroupName,GroupType=@GroupType,UserId=@UserId,IsActive=@IsActive,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE GroupId = @GroupId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["GroupId"] = model.GroupId;
			dictParamters["GroupName"] = model.GroupName;
			dictParamters["GroupType"] = model.GroupType;
			dictParamters["UserId"] = model.UserId;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="GroupId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_group(int GroupId)
        {
            string sql = "UPDATE es_group SET Invalid = @Invalid WHERE GroupId = @GroupId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["GroupId"] = GroupId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="GroupId">主键Id</param>
        /// <returns></returns>
        public virtual es_group Getes_group(int GroupId)
        {
            string sql = "select * from es_group WHERE GroupId = @GroupId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["GroupId"] = GroupId;

            return DBDataSourceHelper.GetSingleOrmData<es_group>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_groupExt : DAL_es_group
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_group
    {
        #region 私有变量

        private static DAL_es_groupExt _dal = new DAL_es_groupExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_group(es_group model)
        {
            return _dal.Addes_group(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_group(es_group model)
        {
            return _dal.Updatees_group(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="GroupId">主键Id</param>
        /// <returns></returns>
        public bool Deles_group(int GroupId)
        {
            return _dal.Deles_group(GroupId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="GroupId">主键Id</param>
        /// <returns></returns>
        public es_group Getes_group(int GroupId)
        {
            return _dal.Getes_group(GroupId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_groupmember
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_groupmember()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 群组成员ID
		/// </summary>
		public string MemberId { get; set; }

		/// <summary>
		/// 头像
		/// </summary>
		public string Photo { get; set; }

		/// <summary>
		/// 姓名
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 邮箱
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 群组ID
		/// </summary>
		public string GroupId { get; set; }

		/// <summary>
		/// 手机号
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 性别 0：男 1：女
		/// </summary>
		public string Sex { get; set; }

		/// <summary>
		/// 生日
		/// </summary>
		public DateTime? Birthday { get; set; }

		/// <summary>
		/// 省份
		/// </summary>
		public string Province { get; set; }

		/// <summary>
		/// 市
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 公司
		/// </summary>
		public string Company { get; set; }

		/// <summary>
		/// 部门
		/// </summary>
		public string Department { get; set; }

		/// <summary>
		/// 职位
		/// </summary>
		public string Position { get; set; }

		/// <summary>
		/// 备注
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 是否加入黑名单 0：否 1：是
		/// </summary>
		public sbyte IsBlackList { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 是否有效 0：无效 1：有效
		/// </summary>
		public sbyte? IsActive { get; set; }

		/// <summary>
		/// 失效原因
		/// </summary>
		public string Reason { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_groupmember
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_groupmember(es_groupmember model)
        {
            string sql = @"INSERT INTO es_groupmember
                                        (Photo,Name,Email,GroupId,Mobile,Sex,Birthday,Province,City,Company,Department,Position,Remark,IsBlackList,DateCreated,DateModified,IsDelete,IsActive,Reason)
                                    VALUES (@Photo,@Name,@Email,@GroupId,@Mobile,@Sex,@Birthday,@Province,@City,@Company,@Department,@Position,@Remark,@IsBlackList,@DateCreated,@DateModified,@IsDelete,@IsActive,@Reason);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Photo"] = model.Photo;
			dictParamters["Name"] = model.Name;
			dictParamters["Email"] = model.Email;
			dictParamters["GroupId"] = model.GroupId;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Sex"] = model.Sex;
			dictParamters["Birthday"] = model.Birthday;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Company"] = model.Company;
			dictParamters["Department"] = model.Department;
			dictParamters["Position"] = model.Position;
			dictParamters["Remark"] = model.Remark;
			dictParamters["IsBlackList"] = model.IsBlackList;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["Reason"] = model.Reason;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_groupmember(es_groupmember model)
        {
            string sql = @"UPDATE es_groupmember
                                  SET Photo=@Photo,Name=@Name,Email=@Email,GroupId=@GroupId,Mobile=@Mobile,Sex=@Sex,Birthday=@Birthday,Province=@Province,City=@City,Company=@Company,Department=@Department,Position=@Position,Remark=@Remark,IsBlackList=@IsBlackList,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete,IsActive=@IsActive,Reason=@Reason
                                WHERE MemberId = @MemberId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["MemberId"] = model.MemberId;
			dictParamters["Photo"] = model.Photo;
			dictParamters["Name"] = model.Name;
			dictParamters["Email"] = model.Email;
			dictParamters["GroupId"] = model.GroupId;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Sex"] = model.Sex;
			dictParamters["Birthday"] = model.Birthday;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Company"] = model.Company;
			dictParamters["Department"] = model.Department;
			dictParamters["Position"] = model.Position;
			dictParamters["Remark"] = model.Remark;
			dictParamters["IsBlackList"] = model.IsBlackList;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["Reason"] = model.Reason;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_groupmember(int MemberId)
        {
            string sql = "UPDATE es_groupmember SET Invalid = @Invalid WHERE MemberId = @MemberId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberId"] = MemberId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public virtual es_groupmember Getes_groupmember(int MemberId)
        {
            string sql = "select * from es_groupmember WHERE MemberId = @MemberId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberId"] = MemberId;

            return DBDataSourceHelper.GetSingleOrmData<es_groupmember>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_groupmemberExt : DAL_es_groupmember
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_groupmember
    {
        #region 私有变量

        private static DAL_es_groupmemberExt _dal = new DAL_es_groupmemberExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_groupmember(es_groupmember model)
        {
            return _dal.Addes_groupmember(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_groupmember(es_groupmember model)
        {
            return _dal.Updatees_groupmember(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public bool Deles_groupmember(int MemberId)
        {
            return _dal.Deles_groupmember(MemberId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public es_groupmember Getes_groupmember(int MemberId)
        {
            return _dal.Getes_groupmember(MemberId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_groupmembertemp
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_groupmembertemp()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 群组成员临时表ID
		/// </summary>
		public string MemberId { get; set; }

		/// <summary>
		/// 一次导入批次的流水单号
		/// </summary>
		public string WaterBillNo { get; set; }

		/// <summary>
		/// 头像
		/// </summary>
		public string Photo { get; set; }

		/// <summary>
		/// 姓名
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 邮箱
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 群组ID
		/// </summary>
		public string GroupId { get; set; }

		/// <summary>
		/// 手机号
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 性别 ：男 ，女
		/// </summary>
		public string Sex { get; set; }

		/// <summary>
		/// 生日
		/// </summary>
		public DateTime? Birthday { get; set; }

		/// <summary>
		/// 省份
		/// </summary>
		public string Province { get; set; }

		/// <summary>
		/// 市
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 公司
		/// </summary>
		public string Company { get; set; }

		/// <summary>
		/// 部门
		/// </summary>
		public string Department { get; set; }

		/// <summary>
		/// 职位
		/// </summary>
		public string Position { get; set; }

		/// <summary>
		/// 备注
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 邮件格式是否通过校验
		/// </summary>
		public sbyte? IsActive { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_groupmembertemp
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_groupmembertemp(es_groupmembertemp model)
        {
            string sql = @"INSERT INTO es_groupmembertemp
                                        (WaterBillNo,Photo,Name,Email,GroupId,Mobile,Sex,Birthday,Province,City,Company,Department,Position,Remark,DateCreated,IsActive,UserId)
                                    VALUES (@WaterBillNo,@Photo,@Name,@Email,@GroupId,@Mobile,@Sex,@Birthday,@Province,@City,@Company,@Department,@Position,@Remark,@DateCreated,@IsActive,@UserId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["WaterBillNo"] = model.WaterBillNo;
			dictParamters["Photo"] = model.Photo;
			dictParamters["Name"] = model.Name;
			dictParamters["Email"] = model.Email;
			dictParamters["GroupId"] = model.GroupId;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Sex"] = model.Sex;
			dictParamters["Birthday"] = model.Birthday;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Company"] = model.Company;
			dictParamters["Department"] = model.Department;
			dictParamters["Position"] = model.Position;
			dictParamters["Remark"] = model.Remark;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["UserId"] = model.UserId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_groupmembertemp(es_groupmembertemp model)
        {
            string sql = @"UPDATE es_groupmembertemp
                                  SET WaterBillNo=@WaterBillNo,Photo=@Photo,Name=@Name,Email=@Email,GroupId=@GroupId,Mobile=@Mobile,Sex=@Sex,Birthday=@Birthday,Province=@Province,City=@City,Company=@Company,Department=@Department,Position=@Position,Remark=@Remark,DateCreated=@DateCreated,IsActive=@IsActive,UserId=@UserId
                                WHERE MemberId = @MemberId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["MemberId"] = model.MemberId;
			dictParamters["WaterBillNo"] = model.WaterBillNo;
			dictParamters["Photo"] = model.Photo;
			dictParamters["Name"] = model.Name;
			dictParamters["Email"] = model.Email;
			dictParamters["GroupId"] = model.GroupId;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Sex"] = model.Sex;
			dictParamters["Birthday"] = model.Birthday;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Company"] = model.Company;
			dictParamters["Department"] = model.Department;
			dictParamters["Position"] = model.Position;
			dictParamters["Remark"] = model.Remark;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["IsActive"] = model.IsActive;
			dictParamters["UserId"] = model.UserId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_groupmembertemp(int MemberId)
        {
            string sql = "UPDATE es_groupmembertemp SET Invalid = @Invalid WHERE MemberId = @MemberId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberId"] = MemberId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public virtual es_groupmembertemp Getes_groupmembertemp(int MemberId)
        {
            string sql = "select * from es_groupmembertemp WHERE MemberId = @MemberId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberId"] = MemberId;

            return DBDataSourceHelper.GetSingleOrmData<es_groupmembertemp>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_groupmembertempExt : DAL_es_groupmembertemp
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_groupmembertemp
    {
        #region 私有变量

        private static DAL_es_groupmembertempExt _dal = new DAL_es_groupmembertempExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_groupmembertemp(es_groupmembertemp model)
        {
            return _dal.Addes_groupmembertemp(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_groupmembertemp(es_groupmembertemp model)
        {
            return _dal.Updatees_groupmembertemp(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public bool Deles_groupmembertemp(int MemberId)
        {
            return _dal.Deles_groupmembertemp(MemberId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberId">主键Id</param>
        /// <returns></returns>
        public es_groupmembertemp Getes_groupmembertemp(int MemberId)
        {
            return _dal.Getes_groupmembertemp(MemberId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_task
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_task()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 发送任务ID
		/// </summary>
		public string TaskId { get; set; }

		/// <summary>
		/// 任务名称
		/// </summary>
		public string TaskName { get; set; }

		/// <summary>
		/// 模板Id
		/// </summary>
		public string TempId { get; set; }

		/// <summary>
		/// 模板内容
		/// </summary>
		public string TempContent { get; set; }

		/// <summary>
		/// 主题
		/// </summary>
		public string Subject { get; set; }

		/// <summary>
		/// 简介
		/// </summary>
		public string Abstract { get; set; }

		/// <summary>
		/// 发件地址
		/// </summary>
		public string SendAddress { get; set; }

		/// <summary>
		/// 发件人
		/// </summary>
		public string Sender { get; set; }

		/// <summary>
		/// 所属用户ID
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// 计划发送时间
		/// </summary>
		public DateTime? PlanSendTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? SendTime { get; set; }

		/// <summary>
		/// 状态 0：编辑中 1：待发送 2：发送中 3：已完成
		/// </summary>
		public int Status { get; set; }

		/// <summary>
		/// 说明
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_task
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_task(es_task model)
        {
            string sql = @"INSERT INTO es_task
                                        (TaskName,TempId,TempContent,Subject,Abstract,SendAddress,Sender,UserId,PlanSendTime,SendTime,Status,Remark,DateCreated,DateModified,IsDelete)
                                    VALUES (@TaskName,@TempId,@TempContent,@Subject,@Abstract,@SendAddress,@Sender,@UserId,@PlanSendTime,@SendTime,@Status,@Remark,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TaskName"] = model.TaskName;
			dictParamters["TempId"] = model.TempId;
			dictParamters["TempContent"] = model.TempContent;
			dictParamters["Subject"] = model.Subject;
			dictParamters["Abstract"] = model.Abstract;
			dictParamters["SendAddress"] = model.SendAddress;
			dictParamters["Sender"] = model.Sender;
			dictParamters["UserId"] = model.UserId;
			dictParamters["PlanSendTime"] = model.PlanSendTime;
			dictParamters["SendTime"] = model.SendTime;
			dictParamters["Status"] = model.Status;
			dictParamters["Remark"] = model.Remark;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_task(es_task model)
        {
            string sql = @"UPDATE es_task
                                  SET TaskName=@TaskName,TempId=@TempId,TempContent=@TempContent,Subject=@Subject,Abstract=@Abstract,SendAddress=@SendAddress,Sender=@Sender,UserId=@UserId,PlanSendTime=@PlanSendTime,SendTime=@SendTime,Status=@Status,Remark=@Remark,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE TaskId = @TaskId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["TaskId"] = model.TaskId;
			dictParamters["TaskName"] = model.TaskName;
			dictParamters["TempId"] = model.TempId;
			dictParamters["TempContent"] = model.TempContent;
			dictParamters["Subject"] = model.Subject;
			dictParamters["Abstract"] = model.Abstract;
			dictParamters["SendAddress"] = model.SendAddress;
			dictParamters["Sender"] = model.Sender;
			dictParamters["UserId"] = model.UserId;
			dictParamters["PlanSendTime"] = model.PlanSendTime;
			dictParamters["SendTime"] = model.SendTime;
			dictParamters["Status"] = model.Status;
			dictParamters["Remark"] = model.Remark;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="TaskId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_task(int TaskId)
        {
            string sql = "UPDATE es_task SET Invalid = @Invalid WHERE TaskId = @TaskId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TaskId"] = TaskId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="TaskId">主键Id</param>
        /// <returns></returns>
        public virtual es_task Getes_task(int TaskId)
        {
            string sql = "select * from es_task WHERE TaskId = @TaskId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TaskId"] = TaskId;

            return DBDataSourceHelper.GetSingleOrmData<es_task>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_taskExt : DAL_es_task
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_task
    {
        #region 私有变量

        private static DAL_es_taskExt _dal = new DAL_es_taskExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_task(es_task model)
        {
            return _dal.Addes_task(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_task(es_task model)
        {
            return _dal.Updatees_task(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="TaskId">主键Id</param>
        /// <returns></returns>
        public bool Deles_task(int TaskId)
        {
            return _dal.Deles_task(TaskId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="TaskId">主键Id</param>
        /// <returns></returns>
        public es_task Getes_task(int TaskId)
        {
            return _dal.Getes_task(TaskId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_taskgroup
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_taskgroup()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// Id
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// 任务Id
		/// </summary>
		public string TaskId { get; set; }

		/// <summary>
		/// 群组Id
		/// </summary>
		public string GroupId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_taskgroup
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_taskgroup(es_taskgroup model)
        {
            string sql = @"INSERT INTO es_taskgroup
                                        (TaskId,GroupId)
                                    VALUES (@TaskId,@GroupId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TaskId"] = model.TaskId;
			dictParamters["GroupId"] = model.GroupId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_taskgroup(es_taskgroup model)
        {
            string sql = @"UPDATE es_taskgroup
                                  SET TaskId=@TaskId,GroupId=@GroupId
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["TaskId"] = model.TaskId;
			dictParamters["GroupId"] = model.GroupId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_taskgroup(int Id)
        {
            string sql = "UPDATE es_taskgroup SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual es_taskgroup Getes_taskgroup(int Id)
        {
            string sql = "select * from es_taskgroup WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<es_taskgroup>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_taskgroupExt : DAL_es_taskgroup
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_taskgroup
    {
        #region 私有变量

        private static DAL_es_taskgroupExt _dal = new DAL_es_taskgroupExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_taskgroup(es_taskgroup model)
        {
            return _dal.Addes_taskgroup(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_taskgroup(es_taskgroup model)
        {
            return _dal.Updatees_taskgroup(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Deles_taskgroup(int Id)
        {
            return _dal.Deles_taskgroup(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public es_taskgroup Getes_taskgroup(int Id)
        {
            return _dal.Getes_taskgroup(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class es_template
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public es_template()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 模板ID
		/// </summary>
		public string TempId { get; set; }

		/// <summary>
		/// 模板名称
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string PhotoUrl { get; set; }

		/// <summary>
		/// 模板简介
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 模本内容
		/// </summary>
		public string Content { get; set; }

		/// <summary>
		/// 是否公共模板 0：否（个人模板） 1：是
		/// </summary>
		public sbyte IsCommon { get; set; }

		/// <summary>
		/// 所属用户ID
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 最后修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_template
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addes_template(es_template model)
        {
            string sql = @"INSERT INTO es_template
                                        (Name,PhotoUrl,Remark,Content,IsCommon,UserId,DateCreated,DateModified,IsDelete)
                                    VALUES (@Name,@PhotoUrl,@Remark,@Content,@IsCommon,@UserId,@DateCreated,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Name"] = model.Name;
			dictParamters["PhotoUrl"] = model.PhotoUrl;
			dictParamters["Remark"] = model.Remark;
			dictParamters["Content"] = model.Content;
			dictParamters["IsCommon"] = model.IsCommon;
			dictParamters["UserId"] = model.UserId;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatees_template(es_template model)
        {
            string sql = @"UPDATE es_template
                                  SET Name=@Name,PhotoUrl=@PhotoUrl,Remark=@Remark,Content=@Content,IsCommon=@IsCommon,UserId=@UserId,DateCreated=@DateCreated,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE TempId = @TempId;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["TempId"] = model.TempId;
			dictParamters["Name"] = model.Name;
			dictParamters["PhotoUrl"] = model.PhotoUrl;
			dictParamters["Remark"] = model.Remark;
			dictParamters["Content"] = model.Content;
			dictParamters["IsCommon"] = model.IsCommon;
			dictParamters["UserId"] = model.UserId;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="TempId">主键Id</param>
        /// <returns></returns>
        public virtual bool Deles_template(int TempId)
        {
            string sql = "UPDATE es_template SET Invalid = @Invalid WHERE TempId = @TempId";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TempId"] = TempId;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="TempId">主键Id</param>
        /// <returns></returns>
        public virtual es_template Getes_template(int TempId)
        {
            string sql = "select * from es_template WHERE TempId = @TempId";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["TempId"] = TempId;

            return DBDataSourceHelper.GetSingleOrmData<es_template>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_es_templateExt : DAL_es_template
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_es_template
    {
        #region 私有变量

        private static DAL_es_templateExt _dal = new DAL_es_templateExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addes_template(es_template model)
        {
            return _dal.Addes_template(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatees_template(es_template model)
        {
            return _dal.Updatees_template(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="TempId">主键Id</param>
        /// <returns></returns>
        public bool Deles_template(int TempId)
        {
            return _dal.Deles_template(TempId);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="TempId">主键Id</param>
        /// <returns></returns>
        public es_template Getes_template(int TempId)
        {
            return _dal.Getes_template(TempId);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class extensionsources
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public extensionsources()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 来源渠道
		/// </summary>
		public string SourceChannel { get; set; }

		/// <summary>
		/// 区分词
		/// </summary>
		public string DistinguishWord { get; set; }

		/// <summary>
		/// 具体来源
		/// </summary>
		public string SpecificSource { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime? DateCreate { get; set; }

		/// <summary>
		/// 备注
		/// </summary>
		public string Remark { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_extensionsources
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addextensionsources(extensionsources model)
        {
            string sql = @"INSERT INTO extensionsources
                                        (SourceChannel,DistinguishWord,SpecificSource,DateCreate,Remark)
                                    VALUES (@SourceChannel,@DistinguishWord,@SpecificSource,@DateCreate,@Remark);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SourceChannel"] = model.SourceChannel;
			dictParamters["DistinguishWord"] = model.DistinguishWord;
			dictParamters["SpecificSource"] = model.SpecificSource;
			dictParamters["DateCreate"] = model.DateCreate;
			dictParamters["Remark"] = model.Remark;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateextensionsources(extensionsources model)
        {
            string sql = @"UPDATE extensionsources
                                  SET SourceChannel=@SourceChannel,DistinguishWord=@DistinguishWord,SpecificSource=@SpecificSource,DateCreate=@DateCreate,Remark=@Remark
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["SourceChannel"] = model.SourceChannel;
			dictParamters["DistinguishWord"] = model.DistinguishWord;
			dictParamters["SpecificSource"] = model.SpecificSource;
			dictParamters["DateCreate"] = model.DateCreate;
			dictParamters["Remark"] = model.Remark;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delextensionsources(int ID)
        {
            string sql = "UPDATE extensionsources SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual extensionsources Getextensionsources(int ID)
        {
            string sql = "select * from extensionsources WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<extensionsources>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_extensionsourcesExt : DAL_extensionsources
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_extensionsources
    {
        #region 私有变量

        private static DAL_extensionsourcesExt _dal = new DAL_extensionsourcesExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addextensionsources(extensionsources model)
        {
            return _dal.Addextensionsources(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateextensionsources(extensionsources model)
        {
            return _dal.Updateextensionsources(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delextensionsources(int ID)
        {
            return _dal.Delextensionsources(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public extensionsources Getextensionsources(int ID)
        {
            return _dal.Getextensionsources(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddbaseinfo
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddbaseinfo()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int InfoID { get; set; }

		/// <summary>
		/// 法大大返回用户唯一标识
		/// </summary>
		public string CustomerID { get; set; }

		/// <summary>
		/// 是否实名认证
		/// </summary>
		public sbyte IsAuth { get; set; }

		/// <summary>
		/// 法大大实名认证流水号
		/// </summary>
		public string AuthNo { get; set; }

		/// <summary>
		/// 客户实名认证地址
		/// </summary>
		public string AuthUrl { get; set; }

		/// <summary>
		/// 实名认证序列号（暂无用到）
		/// </summary>
		public string VerifiedNo { get; set; }

		/// <summary>
		/// 用户印章ID
		/// </summary>
		public string SignatureId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? CreateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddbaseinfo
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddbaseinfo(fddbaseinfo model)
        {
            string sql = @"INSERT INTO fddbaseinfo
                                        (CustomerID,IsAuth,AuthNo,AuthUrl,VerifiedNo,SignatureId,UserID,IsDelete)
                                    VALUES (@CustomerID,@IsAuth,@AuthNo,@AuthUrl,@VerifiedNo,@SignatureId,@UserID,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["CustomerID"] = model.CustomerID;
			dictParamters["IsAuth"] = model.IsAuth;
			dictParamters["AuthNo"] = model.AuthNo;
			dictParamters["AuthUrl"] = model.AuthUrl;
			dictParamters["VerifiedNo"] = model.VerifiedNo;
			dictParamters["SignatureId"] = model.SignatureId;
			dictParamters["UserID"] = model.UserID;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddbaseinfo(fddbaseinfo model)
        {
            string sql = @"UPDATE fddbaseinfo
                                  SET CustomerID=@CustomerID,IsAuth=@IsAuth,AuthNo=@AuthNo,AuthUrl=@AuthUrl,VerifiedNo=@VerifiedNo,SignatureId=@SignatureId,UserID=@UserID,IsDelete=@IsDelete
                                WHERE InfoID = @InfoID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["InfoID"] = model.InfoID;
			dictParamters["CustomerID"] = model.CustomerID;
			dictParamters["IsAuth"] = model.IsAuth;
			dictParamters["AuthNo"] = model.AuthNo;
			dictParamters["AuthUrl"] = model.AuthUrl;
			dictParamters["VerifiedNo"] = model.VerifiedNo;
			dictParamters["SignatureId"] = model.SignatureId;
			dictParamters["UserID"] = model.UserID;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="InfoID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddbaseinfo(int InfoID)
        {
            string sql = "UPDATE fddbaseinfo SET Invalid = @Invalid WHERE InfoID = @InfoID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["InfoID"] = InfoID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="InfoID">主键Id</param>
        /// <returns></returns>
        public virtual fddbaseinfo Getfddbaseinfo(int InfoID)
        {
            string sql = "select * from fddbaseinfo WHERE InfoID = @InfoID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["InfoID"] = InfoID;

            return DBDataSourceHelper.GetSingleOrmData<fddbaseinfo>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddbaseinfoExt : DAL_fddbaseinfo
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddbaseinfo
    {
        #region 私有变量

        private static DAL_fddbaseinfoExt _dal = new DAL_fddbaseinfoExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddbaseinfo(fddbaseinfo model)
        {
            return _dal.Addfddbaseinfo(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddbaseinfo(fddbaseinfo model)
        {
            return _dal.Updatefddbaseinfo(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="InfoID">主键Id</param>
        /// <returns></returns>
        public bool Delfddbaseinfo(int InfoID)
        {
            return _dal.Delfddbaseinfo(InfoID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="InfoID">主键Id</param>
        /// <returns></returns>
        public fddbaseinfo Getfddbaseinfo(int InfoID)
        {
            return _dal.Getfddbaseinfo(InfoID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddbustype
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddbustype()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 主键
		/// </summary>
		public int BusTypeID { get; set; }

		/// <summary>
		/// 业务名称
		/// </summary>
		public string BusTypeName { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 类型 0：Fdd合同 1：协议阅读
		/// </summary>
		public int ContractType { get; set; }

		/// <summary>
		/// 所属应用ID
		/// </summary>
		public string ApplicationId { get; set; }

		/// <summary>
		/// 排序
		/// </summary>
		public int OrderIndex { get; set; }

		/// <summary>
		/// 是否有效 0:无效 1：有效
		/// </summary>
		public sbyte IsActive { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddbustype
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddbustype(fddbustype model)
        {
            string sql = @"INSERT INTO fddbustype
                                        (BusTypeName,AddTime,ContractType,ApplicationId,OrderIndex,IsActive)
                                    VALUES (@BusTypeName,@AddTime,@ContractType,@ApplicationId,@OrderIndex,@IsActive);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BusTypeName"] = model.BusTypeName;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["ContractType"] = model.ContractType;
			dictParamters["ApplicationId"] = model.ApplicationId;
			dictParamters["OrderIndex"] = model.OrderIndex;
			dictParamters["IsActive"] = model.IsActive;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddbustype(fddbustype model)
        {
            string sql = @"UPDATE fddbustype
                                  SET BusTypeName=@BusTypeName,AddTime=@AddTime,ContractType=@ContractType,ApplicationId=@ApplicationId,OrderIndex=@OrderIndex,IsActive=@IsActive
                                WHERE BusTypeID = @BusTypeID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["BusTypeID"] = model.BusTypeID;
			dictParamters["BusTypeName"] = model.BusTypeName;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["ContractType"] = model.ContractType;
			dictParamters["ApplicationId"] = model.ApplicationId;
			dictParamters["OrderIndex"] = model.OrderIndex;
			dictParamters["IsActive"] = model.IsActive;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BusTypeID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddbustype(int BusTypeID)
        {
            string sql = "UPDATE fddbustype SET Invalid = @Invalid WHERE BusTypeID = @BusTypeID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BusTypeID"] = BusTypeID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="BusTypeID">主键Id</param>
        /// <returns></returns>
        public virtual fddbustype Getfddbustype(int BusTypeID)
        {
            string sql = "select * from fddbustype WHERE BusTypeID = @BusTypeID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BusTypeID"] = BusTypeID;

            return DBDataSourceHelper.GetSingleOrmData<fddbustype>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddbustypeExt : DAL_fddbustype
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddbustype
    {
        #region 私有变量

        private static DAL_fddbustypeExt _dal = new DAL_fddbustypeExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddbustype(fddbustype model)
        {
            return _dal.Addfddbustype(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddbustype(fddbustype model)
        {
            return _dal.Updatefddbustype(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BusTypeID">主键Id</param>
        /// <returns></returns>
        public bool Delfddbustype(int BusTypeID)
        {
            return _dal.Delfddbustype(BusTypeID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="BusTypeID">主键Id</param>
        /// <returns></returns>
        public fddbustype Getfddbustype(int BusTypeID)
        {
            return _dal.Getfddbustype(BusTypeID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddcontract
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddcontract()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ContractID { get; set; }

		/// <summary>
		/// 合同编码
		/// </summary>
		public string ContractNum { get; set; }

		/// <summary>
		/// 合同名称
		/// </summary>
		public string ContractName { get; set; }

		/// <summary>
		/// 印章ID 
		/// </summary>
		public string SignatureId { get; set; }

		/// <summary>
		/// 签署印章所属公司主体名称
		/// </summary>
		public string SignatureName { get; set; }

		/// <summary>
		/// 业务类别
		/// </summary>
		public int BusType { get; set; }

		/// <summary>
		/// 合同开始时间
		/// </summary>
		public DateTime ContractSTime { get; set; }

		/// <summary>
		/// 合同结束时间
		/// </summary>
		public DateTime ContractEtime { get; set; }

		/// <summary>
		/// 合同状态（0：待签署  1：签署完成 2：有效  3：无效）
		/// </summary>
		public int ContractStatus { get; set; }

		/// <summary>
		///  是否标准合同（0：否，1：是）
		/// </summary>
		public int ContractType { get; set; }

		/// <summary>
		/// 合同下载地址
		/// </summary>
		public string ContractUrl { get; set; }

		/// <summary>
		/// 合同查看地址
		/// </summary>
		public string ContractViewUrl { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? ContractTypeName { get; set; }

		/// <summary>
		/// 修改时间
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 是否删除 0：未删除 1：已删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddcontract
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddcontract(fddcontract model)
        {
            string sql = @"INSERT INTO fddcontract
                                        (ContractNum,ContractName,SignatureId,SignatureName,BusType,ContractSTime,ContractEtime,ContractStatus,ContractType,ContractUrl,ContractViewUrl,AddTime,UserID,ContractTypeName,DateModified,IsDelete)
                                    VALUES (@ContractNum,@ContractName,@SignatureId,@SignatureName,@BusType,@ContractSTime,@ContractEtime,@ContractStatus,@ContractType,@ContractUrl,@ContractViewUrl,@AddTime,@UserID,@ContractTypeName,@DateModified,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ContractNum"] = model.ContractNum;
			dictParamters["ContractName"] = model.ContractName;
			dictParamters["SignatureId"] = model.SignatureId;
			dictParamters["SignatureName"] = model.SignatureName;
			dictParamters["BusType"] = model.BusType;
			dictParamters["ContractSTime"] = model.ContractSTime;
			dictParamters["ContractEtime"] = model.ContractEtime;
			dictParamters["ContractStatus"] = model.ContractStatus;
			dictParamters["ContractType"] = model.ContractType;
			dictParamters["ContractUrl"] = model.ContractUrl;
			dictParamters["ContractViewUrl"] = model.ContractViewUrl;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["UserID"] = model.UserID;
			dictParamters["ContractTypeName"] = model.ContractTypeName;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddcontract(fddcontract model)
        {
            string sql = @"UPDATE fddcontract
                                  SET ContractNum=@ContractNum,ContractName=@ContractName,SignatureId=@SignatureId,SignatureName=@SignatureName,BusType=@BusType,ContractSTime=@ContractSTime,ContractEtime=@ContractEtime,ContractStatus=@ContractStatus,ContractType=@ContractType,ContractUrl=@ContractUrl,ContractViewUrl=@ContractViewUrl,AddTime=@AddTime,UserID=@UserID,ContractTypeName=@ContractTypeName,DateModified=@DateModified,IsDelete=@IsDelete
                                WHERE ContractID = @ContractID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ContractID"] = model.ContractID;
			dictParamters["ContractNum"] = model.ContractNum;
			dictParamters["ContractName"] = model.ContractName;
			dictParamters["SignatureId"] = model.SignatureId;
			dictParamters["SignatureName"] = model.SignatureName;
			dictParamters["BusType"] = model.BusType;
			dictParamters["ContractSTime"] = model.ContractSTime;
			dictParamters["ContractEtime"] = model.ContractEtime;
			dictParamters["ContractStatus"] = model.ContractStatus;
			dictParamters["ContractType"] = model.ContractType;
			dictParamters["ContractUrl"] = model.ContractUrl;
			dictParamters["ContractViewUrl"] = model.ContractViewUrl;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["UserID"] = model.UserID;
			dictParamters["ContractTypeName"] = model.ContractTypeName;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ContractID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddcontract(int ContractID)
        {
            string sql = "UPDATE fddcontract SET Invalid = @Invalid WHERE ContractID = @ContractID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ContractID"] = ContractID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ContractID">主键Id</param>
        /// <returns></returns>
        public virtual fddcontract Getfddcontract(int ContractID)
        {
            string sql = "select * from fddcontract WHERE ContractID = @ContractID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ContractID"] = ContractID;

            return DBDataSourceHelper.GetSingleOrmData<fddcontract>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddcontractExt : DAL_fddcontract
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddcontract
    {
        #region 私有变量

        private static DAL_fddcontractExt _dal = new DAL_fddcontractExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddcontract(fddcontract model)
        {
            return _dal.Addfddcontract(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddcontract(fddcontract model)
        {
            return _dal.Updatefddcontract(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ContractID">主键Id</param>
        /// <returns></returns>
        public bool Delfddcontract(int ContractID)
        {
            return _dal.Delfddcontract(ContractID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ContractID">主键Id</param>
        /// <returns></returns>
        public fddcontract Getfddcontract(int ContractID)
        {
            return _dal.Getfddcontract(ContractID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddcontractid
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddcontractid()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 合同编号主键
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 合同编号
		/// </summary>
		public int? AutoNum { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime? AddTime { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddcontractid
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddcontractid(fddcontractid model)
        {
            string sql = @"INSERT INTO fddcontractid
                                        (AutoNum,AddTime)
                                    VALUES (@AutoNum,@AddTime);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AutoNum"] = model.AutoNum;
			dictParamters["AddTime"] = model.AddTime;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddcontractid(fddcontractid model)
        {
            string sql = @"UPDATE fddcontractid
                                  SET AutoNum=@AutoNum,AddTime=@AddTime
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["AutoNum"] = model.AutoNum;
			dictParamters["AddTime"] = model.AddTime;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddcontractid(int ID)
        {
            string sql = "UPDATE fddcontractid SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual fddcontractid Getfddcontractid(int ID)
        {
            string sql = "select * from fddcontractid WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<fddcontractid>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddcontractidExt : DAL_fddcontractid
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddcontractid
    {
        #region 私有变量

        private static DAL_fddcontractidExt _dal = new DAL_fddcontractidExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddcontractid(fddcontractid model)
        {
            return _dal.Addfddcontractid(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddcontractid(fddcontractid model)
        {
            return _dal.Updatefddcontractid(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delfddcontractid(int ID)
        {
            return _dal.Delfddcontractid(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public fddcontractid Getfddcontractid(int ID)
        {
            return _dal.Getfddcontractid(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddcontractmodel
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddcontractmodel()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 模板表主键
		/// </summary>
		public string ModelID { get; set; }

		/// <summary>
		/// 模板名称
		/// </summary>
		public string ModelName { get; set; }

		/// <summary>
		/// 印章ID
		/// </summary>
		public string SealID { get; set; }

		/// <summary>
		/// 是否绑定
		/// </summary>
		public sbyte IsBand { get; set; }

		/// <summary>
		/// 业务类型 暂时默认为1（社保）
		/// </summary>
		public int BusType { get; set; }

		/// <summary>
		/// 模板地址
		/// </summary>
		public string ModelUrl { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 添加人
		/// </summary>
		public string AddUser { get; set; }

		/// <summary>
		/// 法大大模板ID
		/// </summary>
		public string TemplateId { get; set; }

		/// <summary>
		/// 备注
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 版本号
		/// </summary>
		public string Version { get; set; }

		/// <summary>
		/// html模板地址
		/// </summary>
		public string ModelUrlHtml { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddcontractmodel
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddcontractmodel(fddcontractmodel model)
        {
            string sql = @"INSERT INTO fddcontractmodel
                                        (ModelName,SealID,IsBand,BusType,ModelUrl,AddTime,AddUser,TemplateId,Remark,Version,ModelUrlHtml)
                                    VALUES (@ModelName,@SealID,@IsBand,@BusType,@ModelUrl,@AddTime,@AddUser,@TemplateId,@Remark,@Version,@ModelUrlHtml);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ModelName"] = model.ModelName;
			dictParamters["SealID"] = model.SealID;
			dictParamters["IsBand"] = model.IsBand;
			dictParamters["BusType"] = model.BusType;
			dictParamters["ModelUrl"] = model.ModelUrl;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["AddUser"] = model.AddUser;
			dictParamters["TemplateId"] = model.TemplateId;
			dictParamters["Remark"] = model.Remark;
			dictParamters["Version"] = model.Version;
			dictParamters["ModelUrlHtml"] = model.ModelUrlHtml;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddcontractmodel(fddcontractmodel model)
        {
            string sql = @"UPDATE fddcontractmodel
                                  SET ModelName=@ModelName,SealID=@SealID,IsBand=@IsBand,BusType=@BusType,ModelUrl=@ModelUrl,AddTime=@AddTime,AddUser=@AddUser,TemplateId=@TemplateId,Remark=@Remark,Version=@Version,ModelUrlHtml=@ModelUrlHtml
                                WHERE ModelID = @ModelID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ModelID"] = model.ModelID;
			dictParamters["ModelName"] = model.ModelName;
			dictParamters["SealID"] = model.SealID;
			dictParamters["IsBand"] = model.IsBand;
			dictParamters["BusType"] = model.BusType;
			dictParamters["ModelUrl"] = model.ModelUrl;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["AddUser"] = model.AddUser;
			dictParamters["TemplateId"] = model.TemplateId;
			dictParamters["Remark"] = model.Remark;
			dictParamters["Version"] = model.Version;
			dictParamters["ModelUrlHtml"] = model.ModelUrlHtml;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ModelID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddcontractmodel(int ModelID)
        {
            string sql = "UPDATE fddcontractmodel SET Invalid = @Invalid WHERE ModelID = @ModelID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ModelID"] = ModelID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ModelID">主键Id</param>
        /// <returns></returns>
        public virtual fddcontractmodel Getfddcontractmodel(int ModelID)
        {
            string sql = "select * from fddcontractmodel WHERE ModelID = @ModelID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ModelID"] = ModelID;

            return DBDataSourceHelper.GetSingleOrmData<fddcontractmodel>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddcontractmodelExt : DAL_fddcontractmodel
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddcontractmodel
    {
        #region 私有变量

        private static DAL_fddcontractmodelExt _dal = new DAL_fddcontractmodelExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddcontractmodel(fddcontractmodel model)
        {
            return _dal.Addfddcontractmodel(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddcontractmodel(fddcontractmodel model)
        {
            return _dal.Updatefddcontractmodel(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ModelID">主键Id</param>
        /// <returns></returns>
        public bool Delfddcontractmodel(int ModelID)
        {
            return _dal.Delfddcontractmodel(ModelID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ModelID">主键Id</param>
        /// <returns></returns>
        public fddcontractmodel Getfddcontractmodel(int ModelID)
        {
            return _dal.Getfddcontractmodel(ModelID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddmodelparam
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddmodelparam()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ParamID { get; set; }

		/// <summary>
		/// 参数中文名称
		/// </summary>
		public string ParamName { get; set; }

		/// <summary>
		/// 参数表主键
		/// </summary>
		public string ModelID { get; set; }

		/// <summary>
		/// 参数数值
		/// </summary>
		public string ParamKey { get; set; }

		/// <summary>
		/// 提示文案
		/// </summary>
		public string TipText { get; set; }

		/// <summary>
		/// 是否必填
		/// </summary>
		public int IsMustSet { get; set; }

		/// <summary>
		/// 排序
		/// </summary>
		public int Sort { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 参数模块类型： 4：企业信息 3：银行信息 2：联系人信息 1：合同信息 0:其他信息
		/// </summary>
		public int ParamType { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddmodelparam
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddmodelparam(fddmodelparam model)
        {
            string sql = @"INSERT INTO fddmodelparam
                                        (ParamName,ModelID,ParamKey,TipText,IsMustSet,Sort,AddTime,ParamType)
                                    VALUES (@ParamName,@ModelID,@ParamKey,@TipText,@IsMustSet,@Sort,@AddTime,@ParamType);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ParamName"] = model.ParamName;
			dictParamters["ModelID"] = model.ModelID;
			dictParamters["ParamKey"] = model.ParamKey;
			dictParamters["TipText"] = model.TipText;
			dictParamters["IsMustSet"] = model.IsMustSet;
			dictParamters["Sort"] = model.Sort;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["ParamType"] = model.ParamType;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddmodelparam(fddmodelparam model)
        {
            string sql = @"UPDATE fddmodelparam
                                  SET ParamName=@ParamName,ModelID=@ModelID,ParamKey=@ParamKey,TipText=@TipText,IsMustSet=@IsMustSet,Sort=@Sort,AddTime=@AddTime,ParamType=@ParamType
                                WHERE ParamID = @ParamID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ParamID"] = model.ParamID;
			dictParamters["ParamName"] = model.ParamName;
			dictParamters["ModelID"] = model.ModelID;
			dictParamters["ParamKey"] = model.ParamKey;
			dictParamters["TipText"] = model.TipText;
			dictParamters["IsMustSet"] = model.IsMustSet;
			dictParamters["Sort"] = model.Sort;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["ParamType"] = model.ParamType;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ParamID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddmodelparam(int ParamID)
        {
            string sql = "UPDATE fddmodelparam SET Invalid = @Invalid WHERE ParamID = @ParamID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ParamID"] = ParamID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ParamID">主键Id</param>
        /// <returns></returns>
        public virtual fddmodelparam Getfddmodelparam(int ParamID)
        {
            string sql = "select * from fddmodelparam WHERE ParamID = @ParamID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ParamID"] = ParamID;

            return DBDataSourceHelper.GetSingleOrmData<fddmodelparam>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddmodelparamExt : DAL_fddmodelparam
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddmodelparam
    {
        #region 私有变量

        private static DAL_fddmodelparamExt _dal = new DAL_fddmodelparamExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddmodelparam(fddmodelparam model)
        {
            return _dal.Addfddmodelparam(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddmodelparam(fddmodelparam model)
        {
            return _dal.Updatefddmodelparam(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ParamID">主键Id</param>
        /// <returns></returns>
        public bool Delfddmodelparam(int ParamID)
        {
            return _dal.Delfddmodelparam(ParamID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ParamID">主键Id</param>
        /// <returns></returns>
        public fddmodelparam Getfddmodelparam(int ParamID)
        {
            return _dal.Getfddmodelparam(ParamID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class fddseal
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public fddseal()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int SealID { get; set; }

		/// <summary>
		/// 印章名称
		/// </summary>
		public string SealName { get; set; }

		/// <summary>
		/// 法大大印章ID
		/// </summary>
		public string SignatureId { get; set; }

		/// <summary>
		/// 印章地址
		/// </summary>
		public string SealUrl { get; set; }

		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 添加人
		/// </summary>
		public string AddUser { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddseal
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfddseal(fddseal model)
        {
            string sql = @"INSERT INTO fddseal
                                        (SealName,SignatureId,SealUrl,AddTime,AddUser,IsDelete)
                                    VALUES (@SealName,@SignatureId,@SealUrl,@AddTime,@AddUser,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SealName"] = model.SealName;
			dictParamters["SignatureId"] = model.SignatureId;
			dictParamters["SealUrl"] = model.SealUrl;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["AddUser"] = model.AddUser;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefddseal(fddseal model)
        {
            string sql = @"UPDATE fddseal
                                  SET SealName=@SealName,SignatureId=@SignatureId,SealUrl=@SealUrl,AddTime=@AddTime,AddUser=@AddUser,IsDelete=@IsDelete
                                WHERE SealID = @SealID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["SealID"] = model.SealID;
			dictParamters["SealName"] = model.SealName;
			dictParamters["SignatureId"] = model.SignatureId;
			dictParamters["SealUrl"] = model.SealUrl;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["AddUser"] = model.AddUser;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="SealID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfddseal(int SealID)
        {
            string sql = "UPDATE fddseal SET Invalid = @Invalid WHERE SealID = @SealID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SealID"] = SealID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="SealID">主键Id</param>
        /// <returns></returns>
        public virtual fddseal Getfddseal(int SealID)
        {
            string sql = "select * from fddseal WHERE SealID = @SealID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["SealID"] = SealID;

            return DBDataSourceHelper.GetSingleOrmData<fddseal>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_fddsealExt : DAL_fddseal
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_fddseal
    {
        #region 私有变量

        private static DAL_fddsealExt _dal = new DAL_fddsealExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfddseal(fddseal model)
        {
            return _dal.Addfddseal(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefddseal(fddseal model)
        {
            return _dal.Updatefddseal(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="SealID">主键Id</param>
        /// <returns></returns>
        public bool Delfddseal(int SealID)
        {
            return _dal.Delfddseal(SealID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="SealID">主键Id</param>
        /// <returns></returns>
        public fddseal Getfddseal(int SealID)
        {
            return _dal.Getfddseal(SealID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class feedbackdetail
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public feedbackdetail()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 实缴月份
		/// </summary>
		public DateTime? Month { get; set; }

		/// <summary>
		/// 险种名称
		/// </summary>
		public string InsuraceName { get; set; }

		/// <summary>
		/// 反馈状态  待反馈  反馈成功 反馈失败
		/// </summary>
		public string Status { get; set; }

		/// <summary>
		/// 社保政策版本号
		/// </summary>
		public string PolicyVersionId { get; set; }

		/// <summary>
		/// 单位实际缴纳基数
		/// </summary>
		public decimal? EnterpriseValue { get; set; }

		/// <summary>
		/// 个人实际缴纳基数
		/// </summary>
		public decimal? PersonValue { get; set; }

		/// <summary>
		/// 反馈信息
		/// </summary>
		public string Remark { get; set; }

		/// <summary>
		/// 反馈结果ID
		/// </summary>
		public string FeedbackResultID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? FeedBackTime { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_feedbackdetail
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfeedbackdetail(feedbackdetail model)
        {
            string sql = @"INSERT INTO feedbackdetail
                                        (Month,InsuraceName,Status,PolicyVersionId,EnterpriseValue,PersonValue,Remark,FeedbackResultID,FeedBackTime)
                                    VALUES (@Month,@InsuraceName,@Status,@PolicyVersionId,@EnterpriseValue,@PersonValue,@Remark,@FeedbackResultID,@FeedBackTime);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Month"] = model.Month;
			dictParamters["InsuraceName"] = model.InsuraceName;
			dictParamters["Status"] = model.Status;
			dictParamters["PolicyVersionId"] = model.PolicyVersionId;
			dictParamters["EnterpriseValue"] = model.EnterpriseValue;
			dictParamters["PersonValue"] = model.PersonValue;
			dictParamters["Remark"] = model.Remark;
			dictParamters["FeedbackResultID"] = model.FeedbackResultID;
			dictParamters["FeedBackTime"] = model.FeedBackTime;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefeedbackdetail(feedbackdetail model)
        {
            string sql = @"UPDATE feedbackdetail
                                  SET Month=@Month,InsuraceName=@InsuraceName,Status=@Status,PolicyVersionId=@PolicyVersionId,EnterpriseValue=@EnterpriseValue,PersonValue=@PersonValue,Remark=@Remark,FeedbackResultID=@FeedbackResultID,FeedBackTime=@FeedBackTime
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["Month"] = model.Month;
			dictParamters["InsuraceName"] = model.InsuraceName;
			dictParamters["Status"] = model.Status;
			dictParamters["PolicyVersionId"] = model.PolicyVersionId;
			dictParamters["EnterpriseValue"] = model.EnterpriseValue;
			dictParamters["PersonValue"] = model.PersonValue;
			dictParamters["Remark"] = model.Remark;
			dictParamters["FeedbackResultID"] = model.FeedbackResultID;
			dictParamters["FeedBackTime"] = model.FeedBackTime;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfeedbackdetail(int ID)
        {
            string sql = "UPDATE feedbackdetail SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual feedbackdetail Getfeedbackdetail(int ID)
        {
            string sql = "select * from feedbackdetail WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<feedbackdetail>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_feedbackdetailExt : DAL_feedbackdetail
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_feedbackdetail
    {
        #region 私有变量

        private static DAL_feedbackdetailExt _dal = new DAL_feedbackdetailExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfeedbackdetail(feedbackdetail model)
        {
            return _dal.Addfeedbackdetail(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefeedbackdetail(feedbackdetail model)
        {
            return _dal.Updatefeedbackdetail(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delfeedbackdetail(int ID)
        {
            return _dal.Delfeedbackdetail(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public feedbackdetail Getfeedbackdetail(int ID)
        {
            return _dal.Getfeedbackdetail(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class feedbackresult
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public feedbackresult()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 申报到泛优返回的订单ID
		/// </summary>
		public string ID { get; set; }

		/// <summary>
		///  受理状态  未受理 ,退回（（未受理和退回的情况下是没有险种反馈的）） 已经受理
		/// </summary>
		public string Status { get; set; }

		/// <summary>
		/// 申报类型
		/// </summary>
		public string BusinessType { get; set; }

		/// <summary>
		/// 反馈信息
		/// </summary>
		public string FeedbackMsg { get; set; }

		/// <summary>
		/// （SocialSecurityItem表的ID）订单细项ID
		/// </summary>
		public string OrderItemId { get; set; }

		/// <summary>
		/// 是否补缴
		/// </summary>
		public sbyte? IsPayBack { get; set; }

		/// <summary>
		/// 补缴开始时间
		/// </summary>
		public DateTime? StartTime { get; set; }

		/// <summary>
		/// 补缴终止时间
		/// </summary>
		public DateTime? EndTime { get; set; }

		/// <summary>
		/// 更新时间
		/// </summary>
		public DateTime? UpdateTime { get; set; }

		/// <summary>
		/// 成员ID
		/// </summary>
		public string MemberId { get; set; }

		/// <summary>
		/// 只用于保存新增+补缴时补缴的受理状态
		/// </summary>
		public string PayBackStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string AccountId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal? AccountBase { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_feedbackresult
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfeedbackresult(feedbackresult model)
        {
            string sql = @"INSERT INTO feedbackresult
                                        (Status,BusinessType,FeedbackMsg,OrderItemId,IsPayBack,StartTime,EndTime,MemberId,PayBackStatus,AccountId,AccountBase)
                                    VALUES (@Status,@BusinessType,@FeedbackMsg,@OrderItemId,@IsPayBack,@StartTime,@EndTime,@MemberId,@PayBackStatus,@AccountId,@AccountBase);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Status"] = model.Status;
			dictParamters["BusinessType"] = model.BusinessType;
			dictParamters["FeedbackMsg"] = model.FeedbackMsg;
			dictParamters["OrderItemId"] = model.OrderItemId;
			dictParamters["IsPayBack"] = model.IsPayBack;
			dictParamters["StartTime"] = model.StartTime;
			dictParamters["EndTime"] = model.EndTime;
			dictParamters["MemberId"] = model.MemberId;
			dictParamters["PayBackStatus"] = model.PayBackStatus;
			dictParamters["AccountId"] = model.AccountId;
			dictParamters["AccountBase"] = model.AccountBase;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefeedbackresult(feedbackresult model)
        {
            string sql = @"UPDATE feedbackresult
                                  SET Status=@Status,BusinessType=@BusinessType,FeedbackMsg=@FeedbackMsg,OrderItemId=@OrderItemId,IsPayBack=@IsPayBack,StartTime=@StartTime,EndTime=@EndTime,MemberId=@MemberId,PayBackStatus=@PayBackStatus,AccountId=@AccountId,AccountBase=@AccountBase
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["Status"] = model.Status;
			dictParamters["BusinessType"] = model.BusinessType;
			dictParamters["FeedbackMsg"] = model.FeedbackMsg;
			dictParamters["OrderItemId"] = model.OrderItemId;
			dictParamters["IsPayBack"] = model.IsPayBack;
			dictParamters["StartTime"] = model.StartTime;
			dictParamters["EndTime"] = model.EndTime;
			dictParamters["MemberId"] = model.MemberId;
			dictParamters["PayBackStatus"] = model.PayBackStatus;
			dictParamters["AccountId"] = model.AccountId;
			dictParamters["AccountBase"] = model.AccountBase;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfeedbackresult(int ID)
        {
            string sql = "UPDATE feedbackresult SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual feedbackresult Getfeedbackresult(int ID)
        {
            string sql = "select * from feedbackresult WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<feedbackresult>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_feedbackresultExt : DAL_feedbackresult
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_feedbackresult
    {
        #region 私有变量

        private static DAL_feedbackresultExt _dal = new DAL_feedbackresultExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfeedbackresult(feedbackresult model)
        {
            return _dal.Addfeedbackresult(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefeedbackresult(feedbackresult model)
        {
            return _dal.Updatefeedbackresult(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delfeedbackresult(int ID)
        {
            return _dal.Delfeedbackresult(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public feedbackresult Getfeedbackresult(int ID)
        {
            return _dal.Getfeedbackresult(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class followresult
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public followresult()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 报名ID
		/// </summary>
		public string ApplicationID { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime? DateCreate { get; set; }

		/// <summary>
		/// 意向程度
		/// </summary>
		public int IntentionLevel { get; set; }

		/// <summary>
		/// 备注
		/// </summary>
		public string Remark { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_followresult
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addfollowresult(followresult model)
        {
            string sql = @"INSERT INTO followresult
                                        (ApplicationID,DateCreate,IntentionLevel,Remark)
                                    VALUES (@ApplicationID,@DateCreate,@IntentionLevel,@Remark);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ApplicationID"] = model.ApplicationID;
			dictParamters["DateCreate"] = model.DateCreate;
			dictParamters["IntentionLevel"] = model.IntentionLevel;
			dictParamters["Remark"] = model.Remark;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatefollowresult(followresult model)
        {
            string sql = @"UPDATE followresult
                                  SET ApplicationID=@ApplicationID,DateCreate=@DateCreate,IntentionLevel=@IntentionLevel,Remark=@Remark
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["ApplicationID"] = model.ApplicationID;
			dictParamters["DateCreate"] = model.DateCreate;
			dictParamters["IntentionLevel"] = model.IntentionLevel;
			dictParamters["Remark"] = model.Remark;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delfollowresult(int ID)
        {
            string sql = "UPDATE followresult SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual followresult Getfollowresult(int ID)
        {
            string sql = "select * from followresult WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<followresult>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_followresultExt : DAL_followresult
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_followresult
    {
        #region 私有变量

        private static DAL_followresultExt _dal = new DAL_followresultExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addfollowresult(followresult model)
        {
            return _dal.Addfollowresult(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatefollowresult(followresult model)
        {
            return _dal.Updatefollowresult(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delfollowresult(int ID)
        {
            return _dal.Delfollowresult(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public followresult Getfollowresult(int ID)
        {
            return _dal.Getfollowresult(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class grabnews
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public grabnews()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Content { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SourceTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? Status { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? HandleTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CategoryName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Author { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_grabnews
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addgrabnews(grabnews model)
        {
            string sql = @"INSERT INTO grabnews
                                        (Title,Content,City,AddTime,SourceTime,Status,HandleTime,CategoryName,Author)
                                    VALUES (@Title,@Content,@City,@AddTime,@SourceTime,@Status,@HandleTime,@CategoryName,@Author);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Title"] = model.Title;
			dictParamters["Content"] = model.Content;
			dictParamters["City"] = model.City;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["SourceTime"] = model.SourceTime;
			dictParamters["Status"] = model.Status;
			dictParamters["HandleTime"] = model.HandleTime;
			dictParamters["CategoryName"] = model.CategoryName;
			dictParamters["Author"] = model.Author;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updategrabnews(grabnews model)
        {
            string sql = @"UPDATE grabnews
                                  SET Title=@Title,Content=@Content,City=@City,AddTime=@AddTime,SourceTime=@SourceTime,Status=@Status,HandleTime=@HandleTime,CategoryName=@CategoryName,Author=@Author
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["Title"] = model.Title;
			dictParamters["Content"] = model.Content;
			dictParamters["City"] = model.City;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["SourceTime"] = model.SourceTime;
			dictParamters["Status"] = model.Status;
			dictParamters["HandleTime"] = model.HandleTime;
			dictParamters["CategoryName"] = model.CategoryName;
			dictParamters["Author"] = model.Author;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delgrabnews(int ID)
        {
            string sql = "UPDATE grabnews SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual grabnews Getgrabnews(int ID)
        {
            string sql = "select * from grabnews WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<grabnews>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_grabnewsExt : DAL_grabnews
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_grabnews
    {
        #region 私有变量

        private static DAL_grabnewsExt _dal = new DAL_grabnewsExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addgrabnews(grabnews model)
        {
            return _dal.Addgrabnews(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updategrabnews(grabnews model)
        {
            return _dal.Updategrabnews(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delgrabnews(int ID)
        {
            return _dal.Delgrabnews(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public grabnews Getgrabnews(int ID)
        {
            return _dal.Getgrabnews(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class hotlabels
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public hotlabels()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string LabelName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? Status { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte IsOverHead { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? ModifyOverHeadTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string KeyWord { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_hotlabels
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addhotlabels(hotlabels model)
        {
            string sql = @"INSERT INTO hotlabels
                                        (LabelName,Status,IsOverHead,ModifyOverHeadTime,KeyWord)
                                    VALUES (@LabelName,@Status,@IsOverHead,@ModifyOverHeadTime,@KeyWord);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["LabelName"] = model.LabelName;
			dictParamters["Status"] = model.Status;
			dictParamters["IsOverHead"] = model.IsOverHead;
			dictParamters["ModifyOverHeadTime"] = model.ModifyOverHeadTime;
			dictParamters["KeyWord"] = model.KeyWord;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatehotlabels(hotlabels model)
        {
            string sql = @"UPDATE hotlabels
                                  SET LabelName=@LabelName,Status=@Status,IsOverHead=@IsOverHead,ModifyOverHeadTime=@ModifyOverHeadTime,KeyWord=@KeyWord
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["LabelName"] = model.LabelName;
			dictParamters["Status"] = model.Status;
			dictParamters["IsOverHead"] = model.IsOverHead;
			dictParamters["ModifyOverHeadTime"] = model.ModifyOverHeadTime;
			dictParamters["KeyWord"] = model.KeyWord;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delhotlabels(int Id)
        {
            string sql = "UPDATE hotlabels SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual hotlabels Gethotlabels(int Id)
        {
            string sql = "select * from hotlabels WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<hotlabels>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_hotlabelsExt : DAL_hotlabels
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_hotlabels
    {
        #region 私有变量

        private static DAL_hotlabelsExt _dal = new DAL_hotlabelsExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addhotlabels(hotlabels model)
        {
            return _dal.Addhotlabels(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatehotlabels(hotlabels model)
        {
            return _dal.Updatehotlabels(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Delhotlabels(int Id)
        {
            return _dal.Delhotlabels(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public hotlabels Gethotlabels(int Id)
        {
            return _dal.Gethotlabels(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class hrplatformnotice
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public hrplatformnotice()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string BusinessType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Type { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Status { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_hrplatformnotice
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addhrplatformnotice(hrplatformnotice model)
        {
            string sql = @"INSERT INTO hrplatformnotice
                                        (BusinessType,Name,Type,Status,OrderId,UserId)
                                    VALUES (@BusinessType,@Name,@Type,@Status,@OrderId,@UserId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["BusinessType"] = model.BusinessType;
			dictParamters["Name"] = model.Name;
			dictParamters["Type"] = model.Type;
			dictParamters["Status"] = model.Status;
			dictParamters["OrderId"] = model.OrderId;
			dictParamters["UserId"] = model.UserId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatehrplatformnotice(hrplatformnotice model)
        {
            string sql = @"UPDATE hrplatformnotice
                                  SET BusinessType=@BusinessType,Name=@Name,Type=@Type,Status=@Status,OrderId=@OrderId,UserId=@UserId
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["BusinessType"] = model.BusinessType;
			dictParamters["Name"] = model.Name;
			dictParamters["Type"] = model.Type;
			dictParamters["Status"] = model.Status;
			dictParamters["OrderId"] = model.OrderId;
			dictParamters["UserId"] = model.UserId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delhrplatformnotice(int ID)
        {
            string sql = "UPDATE hrplatformnotice SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual hrplatformnotice Gethrplatformnotice(int ID)
        {
            string sql = "select * from hrplatformnotice WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<hrplatformnotice>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_hrplatformnoticeExt : DAL_hrplatformnotice
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_hrplatformnotice
    {
        #region 私有变量

        private static DAL_hrplatformnoticeExt _dal = new DAL_hrplatformnoticeExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addhrplatformnotice(hrplatformnotice model)
        {
            return _dal.Addhrplatformnotice(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatehrplatformnotice(hrplatformnotice model)
        {
            return _dal.Updatehrplatformnotice(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delhrplatformnotice(int ID)
        {
            return _dal.Delhrplatformnotice(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public hrplatformnotice Gethrplatformnotice(int ID)
        {
            return _dal.Gethrplatformnotice(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class hrpoapply
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public hrpoapply()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ApplyGuid { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int ApplyTypeId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderItemId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime ApplyDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ApplyNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int ApplyStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte Posted { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? PostedDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? IsCheck { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? CheckDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CheckTor { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ResponseMsg { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MemmberId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_hrpoapply
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addhrpoapply(hrpoapply model)
        {
            string sql = @"INSERT INTO hrpoapply
                                        (ApplyGuid,ApplyTypeId,OrderItemId,ApplyDate,ApplyNumber,DateCreated,DateModified,ApplyStatus,Posted,PostedDate,IsCheck,CheckDate,CheckTor,ResponseMsg,MemmberId,OrderId)
                                    VALUES (@ApplyGuid,@ApplyTypeId,@OrderItemId,@ApplyDate,@ApplyNumber,@DateCreated,@DateModified,@ApplyStatus,@Posted,@PostedDate,@IsCheck,@CheckDate,@CheckTor,@ResponseMsg,@MemmberId,@OrderId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ApplyGuid"] = model.ApplyGuid;
			dictParamters["ApplyTypeId"] = model.ApplyTypeId;
			dictParamters["OrderItemId"] = model.OrderItemId;
			dictParamters["ApplyDate"] = model.ApplyDate;
			dictParamters["ApplyNumber"] = model.ApplyNumber;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["ApplyStatus"] = model.ApplyStatus;
			dictParamters["Posted"] = model.Posted;
			dictParamters["PostedDate"] = model.PostedDate;
			dictParamters["IsCheck"] = model.IsCheck;
			dictParamters["CheckDate"] = model.CheckDate;
			dictParamters["CheckTor"] = model.CheckTor;
			dictParamters["ResponseMsg"] = model.ResponseMsg;
			dictParamters["MemmberId"] = model.MemmberId;
			dictParamters["OrderId"] = model.OrderId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatehrpoapply(hrpoapply model)
        {
            string sql = @"UPDATE hrpoapply
                                  SET ApplyGuid=@ApplyGuid,ApplyTypeId=@ApplyTypeId,OrderItemId=@OrderItemId,ApplyDate=@ApplyDate,ApplyNumber=@ApplyNumber,DateCreated=@DateCreated,DateModified=@DateModified,ApplyStatus=@ApplyStatus,Posted=@Posted,PostedDate=@PostedDate,IsCheck=@IsCheck,CheckDate=@CheckDate,CheckTor=@CheckTor,ResponseMsg=@ResponseMsg,MemmberId=@MemmberId,OrderId=@OrderId
                                WHERE Id = @Id;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["ApplyGuid"] = model.ApplyGuid;
			dictParamters["ApplyTypeId"] = model.ApplyTypeId;
			dictParamters["OrderItemId"] = model.OrderItemId;
			dictParamters["ApplyDate"] = model.ApplyDate;
			dictParamters["ApplyNumber"] = model.ApplyNumber;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["ApplyStatus"] = model.ApplyStatus;
			dictParamters["Posted"] = model.Posted;
			dictParamters["PostedDate"] = model.PostedDate;
			dictParamters["IsCheck"] = model.IsCheck;
			dictParamters["CheckDate"] = model.CheckDate;
			dictParamters["CheckTor"] = model.CheckTor;
			dictParamters["ResponseMsg"] = model.ResponseMsg;
			dictParamters["MemmberId"] = model.MemmberId;
			dictParamters["OrderId"] = model.OrderId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual bool Delhrpoapply(int Id)
        {
            string sql = "UPDATE hrpoapply SET Invalid = @Invalid WHERE Id = @Id";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public virtual hrpoapply Gethrpoapply(int Id)
        {
            string sql = "select * from hrpoapply WHERE Id = @Id";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Id"] = Id;

            return DBDataSourceHelper.GetSingleOrmData<hrpoapply>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_hrpoapplyExt : DAL_hrpoapply
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_hrpoapply
    {
        #region 私有变量

        private static DAL_hrpoapplyExt _dal = new DAL_hrpoapplyExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addhrpoapply(hrpoapply model)
        {
            return _dal.Addhrpoapply(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatehrpoapply(hrpoapply model)
        {
            return _dal.Updatehrpoapply(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public bool Delhrpoapply(int Id)
        {
            return _dal.Delhrpoapply(Id);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public hrpoapply Gethrpoapply(int Id)
        {
            return _dal.Gethrpoapply(Id);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class invoice
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public invoice()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string InvoiceID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string InvoiceApplyNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string InvoiceAddressID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal Amount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal BaseAmount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal ServiceAmount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal TaxAmount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SocialItemIdListJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderIdListJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderNumberListJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int CheckStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? CheckTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int IsCanceled { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? CancelTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal AmountCheck { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal BaseAmountCheck { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal ServiceAmountCheck { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal TaxAmountCheck { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int ApplyToHaoTianStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? ApplyTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ApplyInfoJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ApplyResultJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HaoTianInvoiceID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HaoTianApplyNo { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ApplyResultMsg { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? LatestFetchTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int InvoiceStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string InvoiceStautsRemark { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string InvoiceNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MakeType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string DownloadUrl { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ExpressType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ExpressNo { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int TimeToken { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CheckRemarks { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int IsRedApply { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? RedApplyTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string RedApplyInfoJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string RedApplyResultJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int IsRedApplySuccess { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int BusType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal BaseHouseAmountCheck { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal SocialBaseAmount { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal HouseBaseAmount { get; set; }

		/// <summary>
		/// 开票单位名称
		/// </summary>
		public string MakeUnitName { get; set; }

		/// <summary>
		/// 是否已经重新开票（每条开票申请若开票失败，只允许重新开票一次）
		/// </summary>
		public sbyte IsAgainInvoice { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoice
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addinvoice(invoice model)
        {
            string sql = @"INSERT INTO invoice
                                        (UserID,InvoiceApplyNumber,InvoiceAddressID,Amount,BaseAmount,ServiceAmount,TaxAmount,SocialItemIdListJson,OrderIdListJson,OrderNumberListJson,CheckStatus,CheckTime,IsCanceled,CancelTime,AmountCheck,BaseAmountCheck,ServiceAmountCheck,TaxAmountCheck,ApplyToHaoTianStatus,ApplyTime,ApplyInfoJson,ApplyResultJson,HaoTianInvoiceID,HaoTianApplyNo,ApplyResultMsg,LatestFetchTime,InvoiceStatus,InvoiceStautsRemark,InvoiceNumber,MakeType,DownloadUrl,ExpressType,ExpressNo,DateCreated,DateModified,TimeToken,CheckRemarks,IsRedApply,RedApplyTime,RedApplyInfoJson,RedApplyResultJson,IsRedApplySuccess,BusType,BaseHouseAmountCheck,SocialBaseAmount,HouseBaseAmount,MakeUnitName,IsAgainInvoice)
                                    VALUES (@UserID,@InvoiceApplyNumber,@InvoiceAddressID,@Amount,@BaseAmount,@ServiceAmount,@TaxAmount,@SocialItemIdListJson,@OrderIdListJson,@OrderNumberListJson,@CheckStatus,@CheckTime,@IsCanceled,@CancelTime,@AmountCheck,@BaseAmountCheck,@ServiceAmountCheck,@TaxAmountCheck,@ApplyToHaoTianStatus,@ApplyTime,@ApplyInfoJson,@ApplyResultJson,@HaoTianInvoiceID,@HaoTianApplyNo,@ApplyResultMsg,@LatestFetchTime,@InvoiceStatus,@InvoiceStautsRemark,@InvoiceNumber,@MakeType,@DownloadUrl,@ExpressType,@ExpressNo,@DateCreated,@DateModified,@TimeToken,@CheckRemarks,@IsRedApply,@RedApplyTime,@RedApplyInfoJson,@RedApplyResultJson,@IsRedApplySuccess,@BusType,@BaseHouseAmountCheck,@SocialBaseAmount,@HouseBaseAmount,@MakeUnitName,@IsAgainInvoice);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserID"] = model.UserID;
			dictParamters["InvoiceApplyNumber"] = model.InvoiceApplyNumber;
			dictParamters["InvoiceAddressID"] = model.InvoiceAddressID;
			dictParamters["Amount"] = model.Amount;
			dictParamters["BaseAmount"] = model.BaseAmount;
			dictParamters["ServiceAmount"] = model.ServiceAmount;
			dictParamters["TaxAmount"] = model.TaxAmount;
			dictParamters["SocialItemIdListJson"] = model.SocialItemIdListJson;
			dictParamters["OrderIdListJson"] = model.OrderIdListJson;
			dictParamters["OrderNumberListJson"] = model.OrderNumberListJson;
			dictParamters["CheckStatus"] = model.CheckStatus;
			dictParamters["CheckTime"] = model.CheckTime;
			dictParamters["IsCanceled"] = model.IsCanceled;
			dictParamters["CancelTime"] = model.CancelTime;
			dictParamters["AmountCheck"] = model.AmountCheck;
			dictParamters["BaseAmountCheck"] = model.BaseAmountCheck;
			dictParamters["ServiceAmountCheck"] = model.ServiceAmountCheck;
			dictParamters["TaxAmountCheck"] = model.TaxAmountCheck;
			dictParamters["ApplyToHaoTianStatus"] = model.ApplyToHaoTianStatus;
			dictParamters["ApplyTime"] = model.ApplyTime;
			dictParamters["ApplyInfoJson"] = model.ApplyInfoJson;
			dictParamters["ApplyResultJson"] = model.ApplyResultJson;
			dictParamters["HaoTianInvoiceID"] = model.HaoTianInvoiceID;
			dictParamters["HaoTianApplyNo"] = model.HaoTianApplyNo;
			dictParamters["ApplyResultMsg"] = model.ApplyResultMsg;
			dictParamters["LatestFetchTime"] = model.LatestFetchTime;
			dictParamters["InvoiceStatus"] = model.InvoiceStatus;
			dictParamters["InvoiceStautsRemark"] = model.InvoiceStautsRemark;
			dictParamters["InvoiceNumber"] = model.InvoiceNumber;
			dictParamters["MakeType"] = model.MakeType;
			dictParamters["DownloadUrl"] = model.DownloadUrl;
			dictParamters["ExpressType"] = model.ExpressType;
			dictParamters["ExpressNo"] = model.ExpressNo;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["TimeToken"] = model.TimeToken;
			dictParamters["CheckRemarks"] = model.CheckRemarks;
			dictParamters["IsRedApply"] = model.IsRedApply;
			dictParamters["RedApplyTime"] = model.RedApplyTime;
			dictParamters["RedApplyInfoJson"] = model.RedApplyInfoJson;
			dictParamters["RedApplyResultJson"] = model.RedApplyResultJson;
			dictParamters["IsRedApplySuccess"] = model.IsRedApplySuccess;
			dictParamters["BusType"] = model.BusType;
			dictParamters["BaseHouseAmountCheck"] = model.BaseHouseAmountCheck;
			dictParamters["SocialBaseAmount"] = model.SocialBaseAmount;
			dictParamters["HouseBaseAmount"] = model.HouseBaseAmount;
			dictParamters["MakeUnitName"] = model.MakeUnitName;
			dictParamters["IsAgainInvoice"] = model.IsAgainInvoice;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateinvoice(invoice model)
        {
            string sql = @"UPDATE invoice
                                  SET UserID=@UserID,InvoiceApplyNumber=@InvoiceApplyNumber,InvoiceAddressID=@InvoiceAddressID,Amount=@Amount,BaseAmount=@BaseAmount,ServiceAmount=@ServiceAmount,TaxAmount=@TaxAmount,SocialItemIdListJson=@SocialItemIdListJson,OrderIdListJson=@OrderIdListJson,OrderNumberListJson=@OrderNumberListJson,CheckStatus=@CheckStatus,CheckTime=@CheckTime,IsCanceled=@IsCanceled,CancelTime=@CancelTime,AmountCheck=@AmountCheck,BaseAmountCheck=@BaseAmountCheck,ServiceAmountCheck=@ServiceAmountCheck,TaxAmountCheck=@TaxAmountCheck,ApplyToHaoTianStatus=@ApplyToHaoTianStatus,ApplyTime=@ApplyTime,ApplyInfoJson=@ApplyInfoJson,ApplyResultJson=@ApplyResultJson,HaoTianInvoiceID=@HaoTianInvoiceID,HaoTianApplyNo=@HaoTianApplyNo,ApplyResultMsg=@ApplyResultMsg,LatestFetchTime=@LatestFetchTime,InvoiceStatus=@InvoiceStatus,InvoiceStautsRemark=@InvoiceStautsRemark,InvoiceNumber=@InvoiceNumber,MakeType=@MakeType,DownloadUrl=@DownloadUrl,ExpressType=@ExpressType,ExpressNo=@ExpressNo,DateCreated=@DateCreated,DateModified=@DateModified,TimeToken=@TimeToken,CheckRemarks=@CheckRemarks,IsRedApply=@IsRedApply,RedApplyTime=@RedApplyTime,RedApplyInfoJson=@RedApplyInfoJson,RedApplyResultJson=@RedApplyResultJson,IsRedApplySuccess=@IsRedApplySuccess,BusType=@BusType,BaseHouseAmountCheck=@BaseHouseAmountCheck,SocialBaseAmount=@SocialBaseAmount,HouseBaseAmount=@HouseBaseAmount,MakeUnitName=@MakeUnitName,IsAgainInvoice=@IsAgainInvoice
                                WHERE InvoiceID = @InvoiceID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["InvoiceID"] = model.InvoiceID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["InvoiceApplyNumber"] = model.InvoiceApplyNumber;
			dictParamters["InvoiceAddressID"] = model.InvoiceAddressID;
			dictParamters["Amount"] = model.Amount;
			dictParamters["BaseAmount"] = model.BaseAmount;
			dictParamters["ServiceAmount"] = model.ServiceAmount;
			dictParamters["TaxAmount"] = model.TaxAmount;
			dictParamters["SocialItemIdListJson"] = model.SocialItemIdListJson;
			dictParamters["OrderIdListJson"] = model.OrderIdListJson;
			dictParamters["OrderNumberListJson"] = model.OrderNumberListJson;
			dictParamters["CheckStatus"] = model.CheckStatus;
			dictParamters["CheckTime"] = model.CheckTime;
			dictParamters["IsCanceled"] = model.IsCanceled;
			dictParamters["CancelTime"] = model.CancelTime;
			dictParamters["AmountCheck"] = model.AmountCheck;
			dictParamters["BaseAmountCheck"] = model.BaseAmountCheck;
			dictParamters["ServiceAmountCheck"] = model.ServiceAmountCheck;
			dictParamters["TaxAmountCheck"] = model.TaxAmountCheck;
			dictParamters["ApplyToHaoTianStatus"] = model.ApplyToHaoTianStatus;
			dictParamters["ApplyTime"] = model.ApplyTime;
			dictParamters["ApplyInfoJson"] = model.ApplyInfoJson;
			dictParamters["ApplyResultJson"] = model.ApplyResultJson;
			dictParamters["HaoTianInvoiceID"] = model.HaoTianInvoiceID;
			dictParamters["HaoTianApplyNo"] = model.HaoTianApplyNo;
			dictParamters["ApplyResultMsg"] = model.ApplyResultMsg;
			dictParamters["LatestFetchTime"] = model.LatestFetchTime;
			dictParamters["InvoiceStatus"] = model.InvoiceStatus;
			dictParamters["InvoiceStautsRemark"] = model.InvoiceStautsRemark;
			dictParamters["InvoiceNumber"] = model.InvoiceNumber;
			dictParamters["MakeType"] = model.MakeType;
			dictParamters["DownloadUrl"] = model.DownloadUrl;
			dictParamters["ExpressType"] = model.ExpressType;
			dictParamters["ExpressNo"] = model.ExpressNo;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["TimeToken"] = model.TimeToken;
			dictParamters["CheckRemarks"] = model.CheckRemarks;
			dictParamters["IsRedApply"] = model.IsRedApply;
			dictParamters["RedApplyTime"] = model.RedApplyTime;
			dictParamters["RedApplyInfoJson"] = model.RedApplyInfoJson;
			dictParamters["RedApplyResultJson"] = model.RedApplyResultJson;
			dictParamters["IsRedApplySuccess"] = model.IsRedApplySuccess;
			dictParamters["BusType"] = model.BusType;
			dictParamters["BaseHouseAmountCheck"] = model.BaseHouseAmountCheck;
			dictParamters["SocialBaseAmount"] = model.SocialBaseAmount;
			dictParamters["HouseBaseAmount"] = model.HouseBaseAmount;
			dictParamters["MakeUnitName"] = model.MakeUnitName;
			dictParamters["IsAgainInvoice"] = model.IsAgainInvoice;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="InvoiceID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delinvoice(int InvoiceID)
        {
            string sql = "UPDATE invoice SET Invalid = @Invalid WHERE InvoiceID = @InvoiceID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["InvoiceID"] = InvoiceID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="InvoiceID">主键Id</param>
        /// <returns></returns>
        public virtual invoice Getinvoice(int InvoiceID)
        {
            string sql = "select * from invoice WHERE InvoiceID = @InvoiceID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["InvoiceID"] = InvoiceID;

            return DBDataSourceHelper.GetSingleOrmData<invoice>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceExt : DAL_invoice
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_invoice
    {
        #region 私有变量

        private static DAL_invoiceExt _dal = new DAL_invoiceExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addinvoice(invoice model)
        {
            return _dal.Addinvoice(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateinvoice(invoice model)
        {
            return _dal.Updateinvoice(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="InvoiceID">主键Id</param>
        /// <returns></returns>
        public bool Delinvoice(int InvoiceID)
        {
            return _dal.Delinvoice(InvoiceID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="InvoiceID">主键Id</param>
        /// <returns></returns>
        public invoice Getinvoice(int InvoiceID)
        {
            return _dal.Getinvoice(InvoiceID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class invoiceaddress
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public invoiceaddress()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string RowID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CompanyName { get; set; }

		/// <summary>
		/// 省份
		/// </summary>
		public string Province { get; set; }

		/// <summary>
		/// 城市
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Reception { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ReceiverName { get; set; }

		/// <summary>
		/// 手机号码
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? Status { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceaddress
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addinvoiceaddress(invoiceaddress model)
        {
            string sql = @"INSERT INTO invoiceaddress
                                        (UserID,CompanyName,Province,City,Reception,ReceiverName,Mobile,DateCreated,DateModified,Status)
                                    VALUES (@UserID,@CompanyName,@Province,@City,@Reception,@ReceiverName,@Mobile,@DateCreated,@DateModified,@Status);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserID"] = model.UserID;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Reception"] = model.Reception;
			dictParamters["ReceiverName"] = model.ReceiverName;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Status"] = model.Status;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateinvoiceaddress(invoiceaddress model)
        {
            string sql = @"UPDATE invoiceaddress
                                  SET UserID=@UserID,CompanyName=@CompanyName,Province=@Province,City=@City,Reception=@Reception,ReceiverName=@ReceiverName,Mobile=@Mobile,DateCreated=@DateCreated,DateModified=@DateModified,Status=@Status
                                WHERE RowID = @RowID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["RowID"] = model.RowID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Reception"] = model.Reception;
			dictParamters["ReceiverName"] = model.ReceiverName;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Status"] = model.Status;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delinvoiceaddress(int RowID)
        {
            string sql = "UPDATE invoiceaddress SET Invalid = @Invalid WHERE RowID = @RowID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual invoiceaddress Getinvoiceaddress(int RowID)
        {
            string sql = "select * from invoiceaddress WHERE RowID = @RowID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;

            return DBDataSourceHelper.GetSingleOrmData<invoiceaddress>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceaddressExt : DAL_invoiceaddress
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_invoiceaddress
    {
        #region 私有变量

        private static DAL_invoiceaddressExt _dal = new DAL_invoiceaddressExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addinvoiceaddress(invoiceaddress model)
        {
            return _dal.Addinvoiceaddress(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateinvoiceaddress(invoiceaddress model)
        {
            return _dal.Updateinvoiceaddress(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public bool Delinvoiceaddress(int RowID)
        {
            return _dal.Delinvoiceaddress(RowID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public invoiceaddress Getinvoiceaddress(int RowID)
        {
            return _dal.Getinvoiceaddress(RowID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class invoiceaddress_back
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public invoiceaddress_back()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string RowID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CompanyName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Province { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string City { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Reception { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ReceiverName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? Status { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceaddress_back
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addinvoiceaddress_back(invoiceaddress_back model)
        {
            string sql = @"INSERT INTO invoiceaddress_back
                                        (UserID,CompanyName,Province,City,Reception,ReceiverName,Mobile,DateCreated,DateModified,Status)
                                    VALUES (@UserID,@CompanyName,@Province,@City,@Reception,@ReceiverName,@Mobile,@DateCreated,@DateModified,@Status);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserID"] = model.UserID;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Reception"] = model.Reception;
			dictParamters["ReceiverName"] = model.ReceiverName;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Status"] = model.Status;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateinvoiceaddress_back(invoiceaddress_back model)
        {
            string sql = @"UPDATE invoiceaddress_back
                                  SET UserID=@UserID,CompanyName=@CompanyName,Province=@Province,City=@City,Reception=@Reception,ReceiverName=@ReceiverName,Mobile=@Mobile,DateCreated=@DateCreated,DateModified=@DateModified,Status=@Status
                                WHERE RowID = @RowID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["RowID"] = model.RowID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["CompanyName"] = model.CompanyName;
			dictParamters["Province"] = model.Province;
			dictParamters["City"] = model.City;
			dictParamters["Reception"] = model.Reception;
			dictParamters["ReceiverName"] = model.ReceiverName;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Status"] = model.Status;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delinvoiceaddress_back(int RowID)
        {
            string sql = "UPDATE invoiceaddress_back SET Invalid = @Invalid WHERE RowID = @RowID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public virtual invoiceaddress_back Getinvoiceaddress_back(int RowID)
        {
            string sql = "select * from invoiceaddress_back WHERE RowID = @RowID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["RowID"] = RowID;

            return DBDataSourceHelper.GetSingleOrmData<invoiceaddress_back>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceaddress_backExt : DAL_invoiceaddress_back
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_invoiceaddress_back
    {
        #region 私有变量

        private static DAL_invoiceaddress_backExt _dal = new DAL_invoiceaddress_backExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addinvoiceaddress_back(invoiceaddress_back model)
        {
            return _dal.Addinvoiceaddress_back(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateinvoiceaddress_back(invoiceaddress_back model)
        {
            return _dal.Updateinvoiceaddress_back(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public bool Delinvoiceaddress_back(int RowID)
        {
            return _dal.Delinvoiceaddress_back(RowID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="RowID">主键Id</param>
        /// <returns></returns>
        public invoiceaddress_back Getinvoiceaddress_back(int RowID)
        {
            return _dal.Getinvoiceaddress_back(RowID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class invoiceorderinfo
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public invoiceorderinfo()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string InvoiceID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OrderID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime CreateTime { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceorderinfo
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addinvoiceorderinfo(invoiceorderinfo model)
        {
            string sql = @"INSERT INTO invoiceorderinfo
                                        (InvoiceID,OrderID)
                                    VALUES (@InvoiceID,@OrderID);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["InvoiceID"] = model.InvoiceID;
			dictParamters["OrderID"] = model.OrderID;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateinvoiceorderinfo(invoiceorderinfo model)
        {
            string sql = @"UPDATE invoiceorderinfo
                                  SET InvoiceID=@InvoiceID,OrderID=@OrderID
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["InvoiceID"] = model.InvoiceID;
			dictParamters["OrderID"] = model.OrderID;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delinvoiceorderinfo(int ID)
        {
            string sql = "UPDATE invoiceorderinfo SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual invoiceorderinfo Getinvoiceorderinfo(int ID)
        {
            string sql = "select * from invoiceorderinfo WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<invoiceorderinfo>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_invoiceorderinfoExt : DAL_invoiceorderinfo
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_invoiceorderinfo
    {
        #region 私有变量

        private static DAL_invoiceorderinfoExt _dal = new DAL_invoiceorderinfoExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addinvoiceorderinfo(invoiceorderinfo model)
        {
            return _dal.Addinvoiceorderinfo(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateinvoiceorderinfo(invoiceorderinfo model)
        {
            return _dal.Updateinvoiceorderinfo(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delinvoiceorderinfo(int ID)
        {
            return _dal.Delinvoiceorderinfo(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public invoiceorderinfo Getinvoiceorderinfo(int ID)
        {
            return _dal.Getinvoiceorderinfo(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 留言表
	/// </summary>
	public class leaveword
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public leaveword()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 主键ID,留言ID
		/// </summary>
		public string LeaveWordID { get; set; }

		/// <summary>
		/// 留言用户ID
		/// </summary>
		public string AddUserID { get; set; }

		/// <summary>
		/// 问题类型
		/// </summary>
		public string QuestionType { get; set; }

		/// <summary>
		/// 问题描述
		/// </summary>
		public string QuestionDescription { get; set; }

		/// <summary>
		/// 创建时间
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 更新时间
		/// </summary>
		public DateTime UpdateTime { get; set; }

		/// <summary>
		/// 回复状态
		/// </summary>
		public sbyte ReplyStatus { get; set; }

		/// <summary>
		/// 是否已读
		/// </summary>
		public sbyte IsRead { get; set; }

		/// <summary>
		/// 线上状态(显示/隐藏)
		/// </summary>
		public sbyte OnlineStatus { get; set; }

		/// <summary>
		/// 是否置顶
		/// </summary>
		public sbyte IsFirst { get; set; }

		/// <summary>
		/// 点赞数量
		/// </summary>
		public int ClickCount { get; set; }

		/// <summary>
		/// 图片路径(多张图片以英文;分隔)
		/// </summary>
		public string ImgPath { get; set; }

		/// <summary>
		/// 是否删除
		/// </summary>
		public sbyte IsDelete { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 留言表记录
    /// </summary>
    public class DAL_leaveword
    {
        #region 新增留言表记录

        /// <summary>
        /// 新增留言表记录
        /// </summary>
        /// <param name="model">留言表记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addleaveword(leaveword model)
        {
            string sql = @"INSERT INTO leaveword
                                        (AddUserID,QuestionType,QuestionDescription,ReplyStatus,IsRead,OnlineStatus,IsFirst,ClickCount,ImgPath,IsDelete)
                                    VALUES (@AddUserID,@QuestionType,@QuestionDescription,@ReplyStatus,@IsRead,@OnlineStatus,@IsFirst,@ClickCount,@ImgPath,@IsDelete);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["AddUserID"] = model.AddUserID;
			dictParamters["QuestionType"] = model.QuestionType;
			dictParamters["QuestionDescription"] = model.QuestionDescription;
			dictParamters["ReplyStatus"] = model.ReplyStatus;
			dictParamters["IsRead"] = model.IsRead;
			dictParamters["OnlineStatus"] = model.OnlineStatus;
			dictParamters["IsFirst"] = model.IsFirst;
			dictParamters["ClickCount"] = model.ClickCount;
			dictParamters["ImgPath"] = model.ImgPath;
			dictParamters["IsDelete"] = model.IsDelete;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改留言表记录

        /// <summary>
        /// 根据主键Id修改留言表记录
        /// </summary>
        /// <param name="model">留言表记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updateleaveword(leaveword model)
        {
            string sql = @"UPDATE leaveword
                                  SET AddUserID=@AddUserID,QuestionType=@QuestionType,QuestionDescription=@QuestionDescription,ReplyStatus=@ReplyStatus,IsRead=@IsRead,OnlineStatus=@OnlineStatus,IsFirst=@IsFirst,ClickCount=@ClickCount,ImgPath=@ImgPath,IsDelete=@IsDelete
                                WHERE LeaveWordID = @LeaveWordID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["LeaveWordID"] = model.LeaveWordID;
			dictParamters["AddUserID"] = model.AddUserID;
			dictParamters["QuestionType"] = model.QuestionType;
			dictParamters["QuestionDescription"] = model.QuestionDescription;
			dictParamters["ReplyStatus"] = model.ReplyStatus;
			dictParamters["IsRead"] = model.IsRead;
			dictParamters["OnlineStatus"] = model.OnlineStatus;
			dictParamters["IsFirst"] = model.IsFirst;
			dictParamters["ClickCount"] = model.ClickCount;
			dictParamters["ImgPath"] = model.ImgPath;
			dictParamters["IsDelete"] = model.IsDelete;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除留言表记录

        /// <summary>
        /// 删除留言表记录
        /// </summary>
        /// <param name="LeaveWordID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delleaveword(int LeaveWordID)
        {
            string sql = "UPDATE leaveword SET Invalid = @Invalid WHERE LeaveWordID = @LeaveWordID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["LeaveWordID"] = LeaveWordID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取留言表记录

        /// <summary>
        /// 获取留言表记录
        /// </summary>
        /// <param name="LeaveWordID">主键Id</param>
        /// <returns></returns>
        public virtual leaveword Getleaveword(int LeaveWordID)
        {
            string sql = "select * from leaveword WHERE LeaveWordID = @LeaveWordID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["LeaveWordID"] = LeaveWordID;

            return DBDataSourceHelper.GetSingleOrmData<leaveword>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 留言表记录
    /// </summary>
    public class DAL_leavewordExt : DAL_leaveword
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 留言表记录
    /// </summary>
    public class BLL_leaveword
    {
        #region 私有变量

        private static DAL_leavewordExt _dal = new DAL_leavewordExt();

        #endregion

        #region 新增留言表记录

        /// <summary>
        /// 新增留言表记录
        /// </summary>
        /// <param name="model">留言表记录</param>
        /// <returns>新增记录Id</returns>
        public int Addleaveword(leaveword model)
        {
            return _dal.Addleaveword(model);
        }

        #endregion

        #region 修改留言表记录

        /// <summary>
        /// 根据主键Id修改留言表记录
        /// </summary>
        /// <param name="model">留言表记录</param>
        /// <returns>返回true或false</returns>
        public bool Updateleaveword(leaveword model)
        {
            return _dal.Updateleaveword(model);
        }

        #endregion

        #region 删除留言表记录

        /// <summary>
        /// 删除留言表记录
        /// </summary>
        /// <param name="LeaveWordID">主键Id</param>
        /// <returns></returns>
        public bool Delleaveword(int LeaveWordID)
        {
            return _dal.Delleaveword(LeaveWordID);
        }

        #endregion 

		#region 获取留言表记录

        /// <summary>
        /// 获取留言表记录
        /// </summary>
        /// <param name="LeaveWordID">主键Id</param>
        /// <returns></returns>
        public leaveword Getleaveword(int LeaveWordID)
        {
            return _dal.Getleaveword(LeaveWordID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class links
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public links()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string LinkName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string LinkUrl { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte IsEnable { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte IsDelete { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? AddTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string AddUser { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? Sort { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? EditTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string StationContactor { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HttpType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte NoFollow { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_links
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addlinks(links model)
        {
            string sql = @"INSERT INTO links
                                        (LinkName,LinkUrl,IsEnable,IsDelete,AddTime,AddUser,Sort,EditTime,StationContactor,HttpType,NoFollow)
                                    VALUES (@LinkName,@LinkUrl,@IsEnable,@IsDelete,@AddTime,@AddUser,@Sort,@EditTime,@StationContactor,@HttpType,@NoFollow);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["LinkName"] = model.LinkName;
			dictParamters["LinkUrl"] = model.LinkUrl;
			dictParamters["IsEnable"] = model.IsEnable;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["AddUser"] = model.AddUser;
			dictParamters["Sort"] = model.Sort;
			dictParamters["EditTime"] = model.EditTime;
			dictParamters["StationContactor"] = model.StationContactor;
			dictParamters["HttpType"] = model.HttpType;
			dictParamters["NoFollow"] = model.NoFollow;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatelinks(links model)
        {
            string sql = @"UPDATE links
                                  SET LinkName=@LinkName,LinkUrl=@LinkUrl,IsEnable=@IsEnable,IsDelete=@IsDelete,AddTime=@AddTime,AddUser=@AddUser,Sort=@Sort,EditTime=@EditTime,StationContactor=@StationContactor,HttpType=@HttpType,NoFollow=@NoFollow
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["LinkName"] = model.LinkName;
			dictParamters["LinkUrl"] = model.LinkUrl;
			dictParamters["IsEnable"] = model.IsEnable;
			dictParamters["IsDelete"] = model.IsDelete;
			dictParamters["AddTime"] = model.AddTime;
			dictParamters["AddUser"] = model.AddUser;
			dictParamters["Sort"] = model.Sort;
			dictParamters["EditTime"] = model.EditTime;
			dictParamters["StationContactor"] = model.StationContactor;
			dictParamters["HttpType"] = model.HttpType;
			dictParamters["NoFollow"] = model.NoFollow;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Dellinks(int ID)
        {
            string sql = "UPDATE links SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual links Getlinks(int ID)
        {
            string sql = "select * from links WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<links>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_linksExt : DAL_links
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_links
    {
        #region 私有变量

        private static DAL_linksExt _dal = new DAL_linksExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addlinks(links model)
        {
            return _dal.Addlinks(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatelinks(links model)
        {
            return _dal.Updatelinks(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Dellinks(int ID)
        {
            return _dal.Dellinks(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public links Getlinks(int ID)
        {
            return _dal.Getlinks(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class member
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public member()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string MemberID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CityName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IDCardNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Mobile { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte AttendSocial { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte AttendHouseFound { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal SocialBase { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal HouseFoundBase { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int Status { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte Deleted { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? DeletedTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HousefundApplyNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SocialOrBothApplyNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SupplierCode { get; set; }

		/// <summary>
		/// 产品编号
		/// </summary>
		public string ProductNo { get; set; }

		/// <summary>
		/// 社保账套ID
		/// </summary>
		public string SocialAccountId { get; set; }

		/// <summary>
		/// 公积金账套
		/// </summary>
		public string AccumulationAccountId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SocialVersionNo { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HouseVersionNo { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? SocialInsureDate { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? HouseInsureDate { get; set; }

		/// <summary>
		/// 社保过期时间
		/// </summary>
		public DateTime? InsureExpireDate { get; set; }

		/// <summary>
		/// 公积金过期时间
		/// </summary>
		public DateTime? HFInsureExpireDate { get; set; }

		/// <summary>
		/// 社保是否曾在本市参保
		/// </summary>
		public sbyte? IsSocialInsured { get; set; }

		/// <summary>
		/// 公积金是否曾在本市参保
		/// </summary>
		public sbyte? IsHouseInsured { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int SocialSupplyStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int HouseSupplyStatus { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IDCardType { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_member
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addmember(member model)
        {
            string sql = @"INSERT INTO member
                                        (Name,CityName,IDCardNumber,Mobile,Email,AttendSocial,AttendHouseFound,SocialBase,HouseFoundBase,Status,DateCreated,DateModified,Deleted,DeletedTime,HousefundApplyNumber,SocialOrBothApplyNumber,UserID,SupplierCode,ProductNo,SocialAccountId,AccumulationAccountId,SocialVersionNo,HouseVersionNo,SocialInsureDate,HouseInsureDate,InsureExpireDate,HFInsureExpireDate,IsSocialInsured,IsHouseInsured,SocialSupplyStatus,HouseSupplyStatus,IDCardType)
                                    VALUES (@Name,@CityName,@IDCardNumber,@Mobile,@Email,@AttendSocial,@AttendHouseFound,@SocialBase,@HouseFoundBase,@Status,@DateCreated,@DateModified,@Deleted,@DeletedTime,@HousefundApplyNumber,@SocialOrBothApplyNumber,@UserID,@SupplierCode,@ProductNo,@SocialAccountId,@AccumulationAccountId,@SocialVersionNo,@HouseVersionNo,@SocialInsureDate,@HouseInsureDate,@InsureExpireDate,@HFInsureExpireDate,@IsSocialInsured,@IsHouseInsured,@SocialSupplyStatus,@HouseSupplyStatus,@IDCardType);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["Name"] = model.Name;
			dictParamters["CityName"] = model.CityName;
			dictParamters["IDCardNumber"] = model.IDCardNumber;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Email"] = model.Email;
			dictParamters["AttendSocial"] = model.AttendSocial;
			dictParamters["AttendHouseFound"] = model.AttendHouseFound;
			dictParamters["SocialBase"] = model.SocialBase;
			dictParamters["HouseFoundBase"] = model.HouseFoundBase;
			dictParamters["Status"] = model.Status;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Deleted"] = model.Deleted;
			dictParamters["DeletedTime"] = model.DeletedTime;
			dictParamters["HousefundApplyNumber"] = model.HousefundApplyNumber;
			dictParamters["SocialOrBothApplyNumber"] = model.SocialOrBothApplyNumber;
			dictParamters["UserID"] = model.UserID;
			dictParamters["SupplierCode"] = model.SupplierCode;
			dictParamters["ProductNo"] = model.ProductNo;
			dictParamters["SocialAccountId"] = model.SocialAccountId;
			dictParamters["AccumulationAccountId"] = model.AccumulationAccountId;
			dictParamters["SocialVersionNo"] = model.SocialVersionNo;
			dictParamters["HouseVersionNo"] = model.HouseVersionNo;
			dictParamters["SocialInsureDate"] = model.SocialInsureDate;
			dictParamters["HouseInsureDate"] = model.HouseInsureDate;
			dictParamters["InsureExpireDate"] = model.InsureExpireDate;
			dictParamters["HFInsureExpireDate"] = model.HFInsureExpireDate;
			dictParamters["IsSocialInsured"] = model.IsSocialInsured;
			dictParamters["IsHouseInsured"] = model.IsHouseInsured;
			dictParamters["SocialSupplyStatus"] = model.SocialSupplyStatus;
			dictParamters["HouseSupplyStatus"] = model.HouseSupplyStatus;
			dictParamters["IDCardType"] = model.IDCardType;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatemember(member model)
        {
            string sql = @"UPDATE member
                                  SET Name=@Name,CityName=@CityName,IDCardNumber=@IDCardNumber,Mobile=@Mobile,Email=@Email,AttendSocial=@AttendSocial,AttendHouseFound=@AttendHouseFound,SocialBase=@SocialBase,HouseFoundBase=@HouseFoundBase,Status=@Status,DateCreated=@DateCreated,DateModified=@DateModified,Deleted=@Deleted,DeletedTime=@DeletedTime,HousefundApplyNumber=@HousefundApplyNumber,SocialOrBothApplyNumber=@SocialOrBothApplyNumber,UserID=@UserID,SupplierCode=@SupplierCode,ProductNo=@ProductNo,SocialAccountId=@SocialAccountId,AccumulationAccountId=@AccumulationAccountId,SocialVersionNo=@SocialVersionNo,HouseVersionNo=@HouseVersionNo,SocialInsureDate=@SocialInsureDate,HouseInsureDate=@HouseInsureDate,InsureExpireDate=@InsureExpireDate,HFInsureExpireDate=@HFInsureExpireDate,IsSocialInsured=@IsSocialInsured,IsHouseInsured=@IsHouseInsured,SocialSupplyStatus=@SocialSupplyStatus,HouseSupplyStatus=@HouseSupplyStatus,IDCardType=@IDCardType
                                WHERE MemberID = @MemberID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["MemberID"] = model.MemberID;
			dictParamters["Name"] = model.Name;
			dictParamters["CityName"] = model.CityName;
			dictParamters["IDCardNumber"] = model.IDCardNumber;
			dictParamters["Mobile"] = model.Mobile;
			dictParamters["Email"] = model.Email;
			dictParamters["AttendSocial"] = model.AttendSocial;
			dictParamters["AttendHouseFound"] = model.AttendHouseFound;
			dictParamters["SocialBase"] = model.SocialBase;
			dictParamters["HouseFoundBase"] = model.HouseFoundBase;
			dictParamters["Status"] = model.Status;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Deleted"] = model.Deleted;
			dictParamters["DeletedTime"] = model.DeletedTime;
			dictParamters["HousefundApplyNumber"] = model.HousefundApplyNumber;
			dictParamters["SocialOrBothApplyNumber"] = model.SocialOrBothApplyNumber;
			dictParamters["UserID"] = model.UserID;
			dictParamters["SupplierCode"] = model.SupplierCode;
			dictParamters["ProductNo"] = model.ProductNo;
			dictParamters["SocialAccountId"] = model.SocialAccountId;
			dictParamters["AccumulationAccountId"] = model.AccumulationAccountId;
			dictParamters["SocialVersionNo"] = model.SocialVersionNo;
			dictParamters["HouseVersionNo"] = model.HouseVersionNo;
			dictParamters["SocialInsureDate"] = model.SocialInsureDate;
			dictParamters["HouseInsureDate"] = model.HouseInsureDate;
			dictParamters["InsureExpireDate"] = model.InsureExpireDate;
			dictParamters["HFInsureExpireDate"] = model.HFInsureExpireDate;
			dictParamters["IsSocialInsured"] = model.IsSocialInsured;
			dictParamters["IsHouseInsured"] = model.IsHouseInsured;
			dictParamters["SocialSupplyStatus"] = model.SocialSupplyStatus;
			dictParamters["HouseSupplyStatus"] = model.HouseSupplyStatus;
			dictParamters["IDCardType"] = model.IDCardType;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delmember(int MemberID)
        {
            string sql = "UPDATE member SET Invalid = @Invalid WHERE MemberID = @MemberID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberID"] = MemberID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public virtual member Getmember(int MemberID)
        {
            string sql = "select * from member WHERE MemberID = @MemberID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberID"] = MemberID;

            return DBDataSourceHelper.GetSingleOrmData<member>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_memberExt : DAL_member
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_member
    {
        #region 私有变量

        private static DAL_memberExt _dal = new DAL_memberExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addmember(member model)
        {
            return _dal.Addmember(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatemember(member model)
        {
            return _dal.Updatemember(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public bool Delmember(int MemberID)
        {
            return _dal.Delmember(MemberID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public member Getmember(int MemberID)
        {
            return _dal.Getmember(MemberID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class membermigrate
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public membermigrate()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string OldUserId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string NewUserId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MemberId { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MemberName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? CreatedTime { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_membermigrate
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addmembermigrate(membermigrate model)
        {
            string sql = @"INSERT INTO membermigrate
                                        (OldUserId,NewUserId,MemberId,MemberName,CreatedTime)
                                    VALUES (@OldUserId,@NewUserId,@MemberId,@MemberName,@CreatedTime);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["OldUserId"] = model.OldUserId;
			dictParamters["NewUserId"] = model.NewUserId;
			dictParamters["MemberId"] = model.MemberId;
			dictParamters["MemberName"] = model.MemberName;
			dictParamters["CreatedTime"] = model.CreatedTime;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatemembermigrate(membermigrate model)
        {
            string sql = @"UPDATE membermigrate
                                  SET OldUserId=@OldUserId,NewUserId=@NewUserId,MemberId=@MemberId,MemberName=@MemberName,CreatedTime=@CreatedTime
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["OldUserId"] = model.OldUserId;
			dictParamters["NewUserId"] = model.NewUserId;
			dictParamters["MemberId"] = model.MemberId;
			dictParamters["MemberName"] = model.MemberName;
			dictParamters["CreatedTime"] = model.CreatedTime;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delmembermigrate(int ID)
        {
            string sql = "UPDATE membermigrate SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual membermigrate Getmembermigrate(int ID)
        {
            string sql = "select * from membermigrate WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<membermigrate>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_membermigrateExt : DAL_membermigrate
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_membermigrate
    {
        #region 私有变量

        private static DAL_membermigrateExt _dal = new DAL_membermigrateExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addmembermigrate(membermigrate model)
        {
            return _dal.Addmembermigrate(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatemembermigrate(membermigrate model)
        {
            return _dal.Updatemembermigrate(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delmembermigrate(int ID)
        {
            return _dal.Delmembermigrate(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public membermigrate Getmembermigrate(int ID)
        {
            return _dal.Getmembermigrate(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class memberreportinginfo
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public memberreportinginfo()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MemberID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int ApplyInforID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Content { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_memberreportinginfo
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addmemberreportinginfo(memberreportinginfo model)
        {
            string sql = @"INSERT INTO memberreportinginfo
                                        (MemberID,ApplyInforID,Content)
                                    VALUES (@MemberID,@ApplyInforID,@Content);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberID"] = model.MemberID;
			dictParamters["ApplyInforID"] = model.ApplyInforID;
			dictParamters["Content"] = model.Content;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatememberreportinginfo(memberreportinginfo model)
        {
            string sql = @"UPDATE memberreportinginfo
                                  SET MemberID=@MemberID,ApplyInforID=@ApplyInforID,Content=@Content
                                WHERE ID = @ID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["MemberID"] = model.MemberID;
			dictParamters["ApplyInforID"] = model.ApplyInforID;
			dictParamters["Content"] = model.Content;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delmemberreportinginfo(int ID)
        {
            string sql = "UPDATE memberreportinginfo SET Invalid = @Invalid WHERE ID = @ID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public virtual memberreportinginfo Getmemberreportinginfo(int ID)
        {
            string sql = "select * from memberreportinginfo WHERE ID = @ID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ID"] = ID;

            return DBDataSourceHelper.GetSingleOrmData<memberreportinginfo>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_memberreportinginfoExt : DAL_memberreportinginfo
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_memberreportinginfo
    {
        #region 私有变量

        private static DAL_memberreportinginfoExt _dal = new DAL_memberreportinginfoExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addmemberreportinginfo(memberreportinginfo model)
        {
            return _dal.Addmemberreportinginfo(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatememberreportinginfo(memberreportinginfo model)
        {
            return _dal.Updatememberreportinginfo(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public bool Delmemberreportinginfo(int ID)
        {
            return _dal.Delmemberreportinginfo(ID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ID">主键Id</param>
        /// <returns></returns>
        public memberreportinginfo Getmemberreportinginfo(int ID)
        {
            return _dal.Getmemberreportinginfo(ID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class membertemp
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public membertemp()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public string MemberID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 类型(1、新增订单  3、补缴订单、4、缴社保订单 5、缴公积金订单)
		/// </summary>
		public int Type { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IDCardType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string IDCardNumber { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string CityName { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal? SocialBase { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public decimal? HouseFoundBase { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SocialAddMonth { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? SocialDealLine { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string HouseAddMonth { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime? HFDealLine { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int Status { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ItemJson { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public DateTime DateModified { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public sbyte Deleted { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_membertemp
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addmembertemp(membertemp model)
        {
            string sql = @"INSERT INTO membertemp
                                        (UserID,Type,Name,IDCardType,IDCardNumber,CityName,SocialBase,HouseFoundBase,SocialAddMonth,SocialDealLine,HouseAddMonth,HFDealLine,Status,ItemJson,DateCreated,DateModified,Deleted)
                                    VALUES (@UserID,@Type,@Name,@IDCardType,@IDCardNumber,@CityName,@SocialBase,@HouseFoundBase,@SocialAddMonth,@SocialDealLine,@HouseAddMonth,@HFDealLine,@Status,@ItemJson,@DateCreated,@DateModified,@Deleted);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserID"] = model.UserID;
			dictParamters["Type"] = model.Type;
			dictParamters["Name"] = model.Name;
			dictParamters["IDCardType"] = model.IDCardType;
			dictParamters["IDCardNumber"] = model.IDCardNumber;
			dictParamters["CityName"] = model.CityName;
			dictParamters["SocialBase"] = model.SocialBase;
			dictParamters["HouseFoundBase"] = model.HouseFoundBase;
			dictParamters["SocialAddMonth"] = model.SocialAddMonth;
			dictParamters["SocialDealLine"] = model.SocialDealLine;
			dictParamters["HouseAddMonth"] = model.HouseAddMonth;
			dictParamters["HFDealLine"] = model.HFDealLine;
			dictParamters["Status"] = model.Status;
			dictParamters["ItemJson"] = model.ItemJson;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Deleted"] = model.Deleted;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatemembertemp(membertemp model)
        {
            string sql = @"UPDATE membertemp
                                  SET UserID=@UserID,Type=@Type,Name=@Name,IDCardType=@IDCardType,IDCardNumber=@IDCardNumber,CityName=@CityName,SocialBase=@SocialBase,HouseFoundBase=@HouseFoundBase,SocialAddMonth=@SocialAddMonth,SocialDealLine=@SocialDealLine,HouseAddMonth=@HouseAddMonth,HFDealLine=@HFDealLine,Status=@Status,ItemJson=@ItemJson,DateCreated=@DateCreated,DateModified=@DateModified,Deleted=@Deleted
                                WHERE MemberID = @MemberID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["MemberID"] = model.MemberID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["Type"] = model.Type;
			dictParamters["Name"] = model.Name;
			dictParamters["IDCardType"] = model.IDCardType;
			dictParamters["IDCardNumber"] = model.IDCardNumber;
			dictParamters["CityName"] = model.CityName;
			dictParamters["SocialBase"] = model.SocialBase;
			dictParamters["HouseFoundBase"] = model.HouseFoundBase;
			dictParamters["SocialAddMonth"] = model.SocialAddMonth;
			dictParamters["SocialDealLine"] = model.SocialDealLine;
			dictParamters["HouseAddMonth"] = model.HouseAddMonth;
			dictParamters["HFDealLine"] = model.HFDealLine;
			dictParamters["Status"] = model.Status;
			dictParamters["ItemJson"] = model.ItemJson;
			dictParamters["DateCreated"] = model.DateCreated;
			dictParamters["DateModified"] = model.DateModified;
			dictParamters["Deleted"] = model.Deleted;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delmembertemp(int MemberID)
        {
            string sql = "UPDATE membertemp SET Invalid = @Invalid WHERE MemberID = @MemberID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberID"] = MemberID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public virtual membertemp Getmembertemp(int MemberID)
        {
            string sql = "select * from membertemp WHERE MemberID = @MemberID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MemberID"] = MemberID;

            return DBDataSourceHelper.GetSingleOrmData<membertemp>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_membertempExt : DAL_membertemp
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_membertemp
    {
        #region 私有变量

        private static DAL_membertempExt _dal = new DAL_membertempExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addmembertemp(membertemp model)
        {
            return _dal.Addmembertemp(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatemembertemp(membertemp model)
        {
            return _dal.Updatemembertemp(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public bool Delmembertemp(int MemberID)
        {
            return _dal.Delmembertemp(MemberID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="MemberID">主键Id</param>
        /// <returns></returns>
        public membertemp Getmembertemp(int MemberID)
        {
            return _dal.Getmembertemp(MemberID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class messagerecord
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public messagerecord()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// OID
		/// </summary>
		public string OID { get; set; }

		/// <summary>
		/// 创建日期
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 公司id
		/// </summary>
		public string UserID { get; set; }

		/// <summary>
		/// 消息ID
		/// </summary>
		public string MessageID { get; set; }

		/// <summary>
		/// 阅读标记 0：未读 1：已读
		/// </summary>
		public sbyte ReadStatus { get; set; }

		/// <summary>
		/// 阅读时间
		/// </summary>
		public DateTime? ReadTime { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string TerminalType { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string JsonText { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ShowTitle { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string SubTitle { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string MessageDetail { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string FormId { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_messagerecord
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addmessagerecord(messagerecord model)
        {
            string sql = @"INSERT INTO messagerecord
                                        (UserID,MessageID,ReadStatus,ReadTime,TerminalType,JsonText,ShowTitle,SubTitle,MessageDetail,FormId)
                                    VALUES (@UserID,@MessageID,@ReadStatus,@ReadTime,@TerminalType,@JsonText,@ShowTitle,@SubTitle,@MessageDetail,@FormId);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["UserID"] = model.UserID;
			dictParamters["MessageID"] = model.MessageID;
			dictParamters["ReadStatus"] = model.ReadStatus;
			dictParamters["ReadTime"] = model.ReadTime;
			dictParamters["TerminalType"] = model.TerminalType;
			dictParamters["JsonText"] = model.JsonText;
			dictParamters["ShowTitle"] = model.ShowTitle;
			dictParamters["SubTitle"] = model.SubTitle;
			dictParamters["MessageDetail"] = model.MessageDetail;
			dictParamters["FormId"] = model.FormId;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatemessagerecord(messagerecord model)
        {
            string sql = @"UPDATE messagerecord
                                  SET UserID=@UserID,MessageID=@MessageID,ReadStatus=@ReadStatus,ReadTime=@ReadTime,TerminalType=@TerminalType,JsonText=@JsonText,ShowTitle=@ShowTitle,SubTitle=@SubTitle,MessageDetail=@MessageDetail,FormId=@FormId
                                WHERE OID = @OID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["OID"] = model.OID;
			dictParamters["UserID"] = model.UserID;
			dictParamters["MessageID"] = model.MessageID;
			dictParamters["ReadStatus"] = model.ReadStatus;
			dictParamters["ReadTime"] = model.ReadTime;
			dictParamters["TerminalType"] = model.TerminalType;
			dictParamters["JsonText"] = model.JsonText;
			dictParamters["ShowTitle"] = model.ShowTitle;
			dictParamters["SubTitle"] = model.SubTitle;
			dictParamters["MessageDetail"] = model.MessageDetail;
			dictParamters["FormId"] = model.FormId;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delmessagerecord(int OID)
        {
            string sql = "UPDATE messagerecord SET Invalid = @Invalid WHERE OID = @OID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["OID"] = OID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public virtual messagerecord Getmessagerecord(int OID)
        {
            string sql = "select * from messagerecord WHERE OID = @OID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["OID"] = OID;

            return DBDataSourceHelper.GetSingleOrmData<messagerecord>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_messagerecordExt : DAL_messagerecord
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_messagerecord
    {
        #region 私有变量

        private static DAL_messagerecordExt _dal = new DAL_messagerecordExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addmessagerecord(messagerecord model)
        {
            return _dal.Addmessagerecord(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatemessagerecord(messagerecord model)
        {
            return _dal.Updatemessagerecord(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public bool Delmessagerecord(int OID)
        {
            return _dal.Delmessagerecord(OID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public messagerecord Getmessagerecord(int OID)
        {
            return _dal.Getmessagerecord(OID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class messagetext
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public messagetext()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// OID
		/// </summary>
		public string OID { get; set; }

		/// <summary>
		/// 创建日期
		/// </summary>
		public DateTime CreateTime { get; set; }

		/// <summary>
		/// 消息类型
		/// </summary>
		public int MessageType { get; set; }

		/// <summary>
		/// 消息标题
		/// </summary>
		public string MessageTitle { get; set; }

		/// <summary>
		/// 消息内容
		/// </summary>
		public string MessageContent { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public int? NodeType { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_messagetext
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addmessagetext(messagetext model)
        {
            string sql = @"INSERT INTO messagetext
                                        (MessageType,MessageTitle,MessageContent,NodeType)
                                    VALUES (@MessageType,@MessageTitle,@MessageContent,@NodeType);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["MessageType"] = model.MessageType;
			dictParamters["MessageTitle"] = model.MessageTitle;
			dictParamters["MessageContent"] = model.MessageContent;
			dictParamters["NodeType"] = model.NodeType;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatemessagetext(messagetext model)
        {
            string sql = @"UPDATE messagetext
                                  SET MessageType=@MessageType,MessageTitle=@MessageTitle,MessageContent=@MessageContent,NodeType=@NodeType
                                WHERE OID = @OID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["OID"] = model.OID;
			dictParamters["MessageType"] = model.MessageType;
			dictParamters["MessageTitle"] = model.MessageTitle;
			dictParamters["MessageContent"] = model.MessageContent;
			dictParamters["NodeType"] = model.NodeType;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delmessagetext(int OID)
        {
            string sql = "UPDATE messagetext SET Invalid = @Invalid WHERE OID = @OID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["OID"] = OID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public virtual messagetext Getmessagetext(int OID)
        {
            string sql = "select * from messagetext WHERE OID = @OID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["OID"] = OID;

            return DBDataSourceHelper.GetSingleOrmData<messagetext>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_messagetextExt : DAL_messagetext
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_messagetext
    {
        #region 私有变量

        private static DAL_messagetextExt _dal = new DAL_messagetextExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addmessagetext(messagetext model)
        {
            return _dal.Addmessagetext(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatemessagetext(messagetext model)
        {
            return _dal.Updatemessagetext(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public bool Delmessagetext(int OID)
        {
            return _dal.Delmessagetext(OID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="OID">主键Id</param>
        /// <returns></returns>
        public messagetext Getmessagetext(int OID)
        {
            return _dal.Getmessagetext(OID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class necessaryfiled
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public necessaryfiled()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ReportingInformationID { get; set; }

		/// <summary>
		/// 必填字段名
		/// </summary>
		public string FieldName { get; set; }

		/// <summary>
		/// 必填字段类型
		/// </summary>
		public int FieldType { get; set; }

		/// <summary>
		/// 必填字段内容
		/// </summary>
		public string FieldContent { get; set; }

		/// <summary>
		/// 映射值
		/// </summary>
		public string Value { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_necessaryfiled
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addnecessaryfiled(necessaryfiled model)
        {
            string sql = @"INSERT INTO necessaryfiled
                                        (FieldName,FieldType,FieldContent,Value)
                                    VALUES (@FieldName,@FieldType,@FieldContent,@Value);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["FieldName"] = model.FieldName;
			dictParamters["FieldType"] = model.FieldType;
			dictParamters["FieldContent"] = model.FieldContent;
			dictParamters["Value"] = model.Value;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatenecessaryfiled(necessaryfiled model)
        {
            string sql = @"UPDATE necessaryfiled
                                  SET FieldName=@FieldName,FieldType=@FieldType,FieldContent=@FieldContent,Value=@Value
                                WHERE ReportingInformationID = @ReportingInformationID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["ID"] = model.ID;
			dictParamters["ReportingInformationID"] = model.ReportingInformationID;
			dictParamters["FieldName"] = model.FieldName;
			dictParamters["FieldType"] = model.FieldType;
			dictParamters["FieldContent"] = model.FieldContent;
			dictParamters["Value"] = model.Value;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delnecessaryfiled(int ReportingInformationID)
        {
            string sql = "UPDATE necessaryfiled SET Invalid = @Invalid WHERE ReportingInformationID = @ReportingInformationID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ReportingInformationID"] = ReportingInformationID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public virtual necessaryfiled Getnecessaryfiled(int ReportingInformationID)
        {
            string sql = "select * from necessaryfiled WHERE ReportingInformationID = @ReportingInformationID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ReportingInformationID"] = ReportingInformationID;

            return DBDataSourceHelper.GetSingleOrmData<necessaryfiled>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_necessaryfiledExt : DAL_necessaryfiled
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_necessaryfiled
    {
        #region 私有变量

        private static DAL_necessaryfiledExt _dal = new DAL_necessaryfiledExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addnecessaryfiled(necessaryfiled model)
        {
            return _dal.Addnecessaryfiled(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatenecessaryfiled(necessaryfiled model)
        {
            return _dal.Updatenecessaryfiled(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public bool Delnecessaryfiled(int ReportingInformationID)
        {
            return _dal.Delnecessaryfiled(ReportingInformationID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public necessaryfiled Getnecessaryfiled(int ReportingInformationID)
        {
            return _dal.Getnecessaryfiled(ReportingInformationID);
        }

        #endregion 
    }
}	


//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PlatFormService.Model.Database
{
	/// <summary>
	/// 
	/// </summary>
	public class necessaryreportfile
	{
		#region "  构造函数  "
		
		/// <summary>
        /// 默认构造函数
        /// </summary>
		public necessaryreportfile()
        {
			     
        }   

        #endregion

		#region "  属性定义  "

		/// <summary>
		/// 
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public string ReportingInformationID { get; set; }

		/// <summary>
		/// 必填资料名
		/// </summary>
		public string FileName { get; set; }

		/// <summary>
		/// 必填资料类型
		/// </summary>
		public int FileType { get; set; }

		/// <summary>
		/// 必填资料数量
		/// </summary>
		public int FileCount { get; set; }

		/// <summary>
		/// 必填资料要求
		/// </summary>
		public string FileRequest { get; set; }

		/// <summary>
		/// 资料样本下载地址
		/// </summary>
		public string FileUrl { get; set; }

		/// <summary>
		/// 空样本下载地址
		/// </summary>
		public string EmptyFileUrl { get; set; }

		/// <summary>
		/// 映射值
		/// </summary>
		public string Value { get; set; }


		#endregion
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//
// 此文件由T4模板生成，请勿手动修改
//
// 时间：2022-08-09 12:07:16
// </auto-generated>
//------------------------------------------------------------------------------

using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_necessaryreportfile
    {
        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public virtual int Addnecessaryreportfile(necessaryreportfile model)
        {
            string sql = @"INSERT INTO necessaryreportfile
                                        (FileName,FileType,FileCount,FileRequest,FileUrl,EmptyFileUrl,Value)
                                    VALUES (@FileName,@FileType,@FileCount,@FileRequest,@FileUrl,@EmptyFileUrl,@Value);SELECT @@IDENTITY;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["FileName"] = model.FileName;
			dictParamters["FileType"] = model.FileType;
			dictParamters["FileCount"] = model.FileCount;
			dictParamters["FileRequest"] = model.FileRequest;
			dictParamters["FileUrl"] = model.FileUrl;
			dictParamters["EmptyFileUrl"] = model.EmptyFileUrl;
			dictParamters["Value"] = model.Value;
			
            return DBDataSourceHelper.ExecuteScalar<int>(sql,dictParamters);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public virtual bool Updatenecessaryreportfile(necessaryreportfile model)
        {
            string sql = @"UPDATE necessaryreportfile
                                  SET FileName=@FileName,FileType=@FileType,FileCount=@FileCount,FileRequest=@FileRequest,FileUrl=@FileUrl,EmptyFileUrl=@EmptyFileUrl,Value=@Value
                                WHERE ReportingInformationID = @ReportingInformationID;";

			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
            dictParamters["Id"] = model.Id;
			dictParamters["ReportingInformationID"] = model.ReportingInformationID;
			dictParamters["FileName"] = model.FileName;
			dictParamters["FileType"] = model.FileType;
			dictParamters["FileCount"] = model.FileCount;
			dictParamters["FileRequest"] = model.FileRequest;
			dictParamters["FileUrl"] = model.FileUrl;
			dictParamters["EmptyFileUrl"] = model.EmptyFileUrl;
			dictParamters["Value"] = model.Value;
			            
            var num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public virtual bool Delnecessaryreportfile(int ReportingInformationID)
        {
            string sql = "UPDATE necessaryreportfile SET Invalid = @Invalid WHERE ReportingInformationID = @ReportingInformationID";
            
			Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ReportingInformationID"] = ReportingInformationID;
			dictParamters["Invalid"] = (sbyte)InvalidEnum.Invalid;

            int num = DBDataSourceHelper.ExecuteNonQuery(sql,dictParamters);

            return num > 0;
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public virtual necessaryreportfile Getnecessaryreportfile(int ReportingInformationID)
        {
            string sql = "select * from necessaryreportfile WHERE ReportingInformationID = @ReportingInformationID";

            Dictionary<string, object> dictParamters = new Dictionary<string, object>();
			dictParamters["ReportingInformationID"] = ReportingInformationID;

            return DBDataSourceHelper.GetSingleOrmData<necessaryreportfile>(sql, dictParamters);
        }

        #endregion 
    }
}
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;
using PlatFormService.Model.Enums;
using System;
using System.Data;
using System.Collections.Generic;
using Xqd.Common.Feature.Helper;
using Xqd.Common.Utils.Models;

namespace PlatFormService.DAL.Extend
{
    /// <summary>
    /// 记录
    /// </summary>
    public class DAL_necessaryreportfileExt : DAL_necessaryreportfile
    {

    }
}
using PlatFormService.DAL.Extend;
using PlatFormService.DAL.Database;
using PlatFormService.Model.Database;

namespace PlatFormService.BLL.Database
{
    /// <summary>
    /// 记录
    /// </summary>
    public class BLL_necessaryreportfile
    {
        #region 私有变量

        private static DAL_necessaryreportfileExt _dal = new DAL_necessaryreportfileExt();

        #endregion

        #region 新增记录

        /// <summary>
        /// 新增记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>新增记录Id</returns>
        public int Addnecessaryreportfile(necessaryreportfile model)
        {
            return _dal.Addnecessaryreportfile(model);
        }

        #endregion

        #region 修改记录

        /// <summary>
        /// 根据主键Id修改记录
        /// </summary>
        /// <param name="model">记录</param>
        /// <returns>返回true或false</returns>
        public bool Updatenecessaryreportfile(necessaryreportfile model)
        {
            return _dal.Updatenecessaryreportfile(model);
        }

        #endregion

        #region 删除记录

        /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public bool Delnecessaryreportfile(int ReportingInformationID)
        {
            return _dal.Delnecessaryreportfile(ReportingInformationID);
        }

        #endregion 

		#region 获取记录

        /// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="ReportingInformationID">主键Id</param>
        /// <returns></returns>
        public necessaryreportfile Getnecessaryreportfile(int ReportingInformationID)
        {
            return _dal.Getnecessaryreportfile(ReportingInformationID);
        }

        #endregion 
    }
}	

